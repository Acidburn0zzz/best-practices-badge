<div class="row">
  <div class="col-md-7 col-md-offset-1">

  <%= form_for(@project) do |f| %>
    <%= render 'shared/error_messages', object: f.object %>

    <h2 class="center">OSS Project Basics</h2>

    <h3><i>Identification</i></h3>
      <span>What is the human-readable name of the project (note that other
            projects may use the same name)?</span>
      <%= f.text_field :name, class:"form-control", placeholder:'OSS Project Name' %>

      <span>What is a brief description of the project, including key comments
            about it (for use when displaying badge information)?</span>
      <%= f.text_area :description, class:"form-control", hide_label: true, placeholder:'Project Description' %>

      <span>What is the URL for the project (as a whole)?</span>
      <%= f.text_field :project_url, class:"form-control", hide_label: true, placeholder:'Project Website URL' %>

      <span>What is the URL for the version control repository
            (it may the same as the project URL)?</span>
      <%= f.text_field :repo_url, class:"form-control", hide_label: true, placeholder:'Project Repo URL' %>

      <span>What license(s) is the project released under?</span>
      <%= f.text_field :license, class:"form-control", hide_label: true, placeholder:'OSS License' %>
      <br>

    <h3><i>Basic Project Website Content</i></h3>
    <div class="row">
      <div class="col-md-3 criteria-radio">
        <%= image_tag("/assets/Thumbs_down_font_awesome.svg", size: "20x20", alt: "Thumbs down", id: "description_sufficient_enough") %>
        <%= f.label :description_sufficient_status do %>
          <%= f.radio_button :description_sufficient_status, 'Met'%> Met
        <% end %>
        <%= f.label :description_sufficient_status do %>
          <%= f.radio_button :description_sufficient_status, 'Unmet' %> Unmet
        <% end %>
        <%= f.label :description_sufficient_status do %>
          <%= f.radio_button :description_sufficient_status, '?', :checked => true %> &nbsp;?&nbsp;
        <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
         <span>The project website MUST succinctly describe what the software does
               (what problem does it solve?), in language that potential users can
               understand (e.g., it uses minimal jargon). <sup>[description-sufficient]</sup></span>

         <%= f.text_field :description_sufficient_justification, class:"form-control", hide_label: true, placeholder:'Please explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
        <%= f.label :interact_status do %>
          <%= f.radio_button :interact_status, '?', :checked => true %> &nbsp;?&nbsp;
        <% end %>
        <%= f.label :interact_status do %>
          <%= f.radio_button :interact_status, 'Met'%> Met
        <% end %>
        <%= f.label :interact_status do %>
          <%= f.radio_button :interact_status, 'Unmet' %> Unmet
        <% end %>
      </div>
      <div class="col-md-9 criteria-desc">
         <span>The project website MUST provide information on how to: obtain,provide feedback
              (as bug reports or enhancements), and contribute to the sofware. <sup>[interact]</sup></span>
         <%= f.text_field :interact_justification, class:"form-control", hide_label: true, placeholder:'Please explain' %>
      </div>
      </div>
      <hr>

      <div class="row">
      <div class="col-md-3 criteria-radio">
        <%= f.label :contribution_status do %>
          <%= f.radio_button :contribution_status, '?', :checked => true %> &nbsp;?&nbsp;
        <% end %>
        <%= f.label :contribution_status do %>
          <%= f.radio_button :contribution_status, 'Met'%> Met
        <% end %>
        <%= f.label :contribution_status do %>
          <%= f.radio_button :contribution_status, 'Unmet' %> Unmet
        <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
         <span>The project website MUST provide information on how to: obtain,provide feedback
              (as bug reports or enhancements), and contribute to the sofware. <sup>[contribution]</sup></span>
         <%= f.text_field :contribution_justification, class:"form-control", hide_label: true, placeholder:'Please explain' %>
      </div>
      </div>
      <hr>

      <div class="row">
      <div class="col-md-3 criteria-radio">
        <%= f.label :contribution_criteria_status do %>
          <%= f.radio_button :contribution_criteria_status, '?', :checked => true %> &nbsp;?&nbsp;
        <% end %>
        <%= f.label :contribution_criteria_status do %>
          <%= f.radio_button :contribution_criteria_status, 'Met'%> Met
        <% end %>
        <%= f.label :contribution_criteria_status do %>
          <%= f.radio_button :contribution_criteria_status, 'Unmet' %> Unmet
        <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
         <span>The project website MUST provide information on how to: obtain, provide feedback
              (as bug reports or enhancements), and contribute to the sofware. <sup>[contribution-criteria]</sup></span>
         <%= f.text_field :contribution_criteria_justification, class:"form-control", hide_label: true, placeholder:'Please explain' %>
      </div>
      </div>
      <br><br>

      <h3><i>OSS License</i></h3>
       <div class="row">
       <div class="col-md-3 criteria-radio">
         <%= f.label :license_location_status do %>
           <%= f.radio_button :license_location_status, '?', :checked => true %> &nbsp;?&nbsp;
         <% end %>
         <%= f.label :license_location_status do %>
           <%= f.radio_button :license_location_status, 'Met'%> Met
         <% end %>
         <%= f.label :license_location_status do %>
           <%= f.radio_button :license_location_status, 'Unmet' %> Unmet
         <% end %>
       </div>
       <div class='col-md-9 criteria-desc'>
          <span>License(s) MUST be posted in a standard location (e.g., as a top-level file named LICENSE or COPYING).
             License filenames MAY be followed by an extension such as ".txt" or ".md") <sup>[license-location]</sup></span>
          <%= f.text_field :license_location_justification, class:"form-control", hide_label: true, placeholder:'Please explain' %>
       </div>
       </div>

       <hr>
       <div class="row">
       <div class="col-md-3 criteria-radio">
        <%= f.label :oss_license_status do %>
          <%= f.radio_button :oss_license_status, '?', :checked => true %> &nbsp;?&nbsp;
        <% end %>
        <%= f.label :oss_license_status do %>
          <%= f.radio_button :oss_license_status, 'Met' %> Met
        <% end %>
        <%= f.label :oss_license_status do %>
          <%= f.radio_button :oss_license_status, 'Unmet' %> Unmet
        <% end %>
       </div>
       <div class='col-md-9 criteria-desc'>
       <span>The software MUST be released as OSS. For our purposes, this means that the license MUST be at least one of the following:
          an approved license by the Open Source Initiative (OSI)
          a free license as approved by the Free Software Foundation (FSF)
          a free license acceptable to Debian main
          a "good" license according to Fedora. <sup>[oss-license]</sup></span>
       <%= f.text_field :oss_license_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>
       <hr>

       <div class="row">
       <div class="col-md-3 criteria-radio">
        <%= f.label :oss_license_osi_status do %>
          <%= f.radio_button :oss_license_osi_status, '?', :checked => true %> &nbsp;?&nbsp;
        <% end %>
        <%= f.label :oss_license_osi_status do %>
          <%= f.radio_button :oss_license_osi_status, 'Met'%> Met
        <% end %>
        <%= f.label :oss_license_osi_status do %>
          <%= f.radio_button :oss_license_osi_status, 'Unmet'%> Unmet
        <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that any required license(s) be OSI-approved. <sup>[oss-license-osi]</sup> </span>
      <%= f.text_field :oss_license_osi_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>
      <br>
      <span class='criteria-desc'><b>Note</b>: We intend for the automated tool to focus on identifying common OSS licenses such as:
        CC0, MIT, BSD 2-clause, BSD 3-clause revised, Apache 2.0, Lesser GNU General Public License (LGPL),
        and the GNU General Public License (GPL).<br>
        <b>Rationale</b>: These criteria are designed for OSS projects, so we need to ensure
        that they're only used where they apply. Some projects are thought of as OSS
        yet are not actually released as OSS (e.g., they might not have any license,
        in which case the defaults of the country's legal system apply, or they might use a non-OSS license).
        Unusual licenses can cause long-term problems for OSS projects and are more difficult for tools to handle.
        We expect that that "higher-level" criteria would set a higher bar, e.g., that it must be released under an OSI-approved license.</span>

      <br><br>
      <h3><i>Documentation</i></h3>

      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :documentation_basics_status do %>
         <%= f.radio_button :documentation_basics_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :documentation_basics_status do %>
         <%= f.radio_button :documentation_basics_status, 'Met'%> Met
       <% end %>
       <%= f.label :documentation_basics_status do %>
         <%= f.radio_button :documentation_basics_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST provide basic documentation for the software in some media (such as text or video) that includes:
            how to install it, how to start it, how to use it (possibly with a tutorial using examples), and
            how to use it securely (e.g., what to do and what not to do) if that is an appropriate topic for the software.
            The security documentation need not be long (it is better for the software to be designed to be secure by default).
            <sup>[documentation-basics]</sup></span>
      <%= f.text_field :documentation_basics_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :documentation_interface_status do %>
         <%= f.radio_button :documentation_interface_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :documentation_interface_status do %>
         <%= f.radio_button :documentation_interface_status, 'Met'%> Met
       <% end %>
       <%= f.label :documentation_interface_status do %>
         <%= f.radio_button :documentation_interface_status, 'Unmet'%> Unmet
       <% end %>
     </div>
     <div class='col-md-9 criteria-desc'>
     <span>The project MUST include reference documentation that describes its interface.
           <sup>[documentation-interface]</sup></span>
     <%= f.text_field :documentation_interface_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
     <br>
     <!--span>The project MAY use hypertext links to non-project material as documentation,
           as long as the linked-to information is available and meets the requirements.</span-->
     </div>
     </div>

      <br><br><br>
      <h2 class="center h2">Change Control</h2>
      <h3><i>Public version-controlled source repository</i></h3>

       <div class="row">
       <div class="col-md-3 criteria-radio">
        <%= f.label :repo_url_status do %>
          <%= f.radio_button :repo_url_status, '?', :checked => true %> &nbsp;?&nbsp;
        <% end %>
        <%= f.label :repo_url_status do %>
          <%= f.radio_button :repo_url_status, 'Met'%> Met
        <% end %>
        <%= f.label :repo_url_status do %>
          <%= f.radio_button :repo_url_status, 'Unmet'%> Unmet
        <% end %>
       </div>
       <div class='col-md-9 criteria-desc'>
       <span>The project MUST have a version-controlled source repository that is publicly readable and has
             a URL (the URL MAY be the same as the project URL). <sup>[repo-url]</sup></span>
       <%= f.text_field :repo_url_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
       </div>
       </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :repo_track_status do %>
         <%= f.radio_button :repo_track_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :repo_track_status do %>
         <%= f.radio_button :repo_track_status, 'Met'%> Met
       <% end %>
       <%= f.label :repo_track_status do %>
         <%= f.radio_button :repo_track_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The source repository MUST track what changes were made, who made the changes,
            and when the changes were made. <sup>[repo-track]</sup></span>
      <%= f.text_field :repo_track_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :repo_interim_status do %>
         <%= f.radio_button :repo_interim_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :repo_interim_status do %>
         <%= f.radio_button :repo_interim_status, 'Met'%> Met
       <% end %>
       <%= f.label :repo_interim_status do %>
         <%= f.radio_button :repo_interim_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The source repository MUST include interim versions for review between releases;
            it MUST NOT include only final releases. <sup>[repo-interim]</sup> </span>
      <%= f.text_field :repo_interim_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :repo_distributed_status do %>
         <%= f.radio_button :repo_distributed_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :repo_distributed_status do %>
         <%= f.radio_button :repo_distributed_status, 'Met'%> Met
       <% end %>
       <%= f.label :repo_distributed_status do %>
         <%= f.radio_button :repo_distributed_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
        <span>It is SUGGESTED that common distributed version control software is used (e.g., git).
            Git is not specifically required and projects can use centralized version control software
            (such as subversion) with justification. <sup>[repo-distributed]</sup> </span>
        <%= f.text_field :repo_distributed_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>
      <br>
      <span class='criteria-desc'>The project MAY use private (non-public)
            branches in specific cases while the change is not publicly released
            (e.g., for fixing a vulnerability before it is revealed to the public).<br>
            <b>Rationale</b>: This enables easy tracking
            and public review. Some OSS projects do not use a version control system or do not provide public access to it.
            The lack of a public version control repository makes it unnecessarily difficult to contribute to a project
            and to track its progress in detail.</span>

      <br><br>
      <h3><i>Version numbering</i></h3>

      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :version_unique_status do %>
         <%= f.radio_button :version_unique_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :version_unique_status do %>
         <%= f.radio_button :version_unique_status, 'Met'%> Met
       <% end %>
       <%= f.label :version_unique_status do %>
         <%= f.radio_button :version_unique_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST have a unique version number for each release intended
            to be used by users. <sup>[version-unique]</sup></span>
      <%= f.text_field :version_unique_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <div class="row">
      <hr class='col-md-11'>
      <div class="col-md-3 criteria-radio">
       <%= f.label :version_semver_status do %>
         <%= f.radio_button :version_semver_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :version_semver_status do %>
         <%= f.radio_button :version_semver_status, 'Met'%> Met
       <% end %>
       <%= f.label :version_semver_status do %>
         <%= f.radio_button :version_semver_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that the Semantic Versioning (SemVer) format is
            used for releases. <sup>[version-semver]</sup></span><br>
      <%= f.text_field :version_semver_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      <span>Commit IDs (or similar) MAY be used as as version numbers. They are unique, but note that these can
            cause problems for users as they may not be able to determine whether or not they're up-to-date.</span>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :version_tags_status do %>
         <%= f.radio_button :version_tags_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :version_tags_status do %>
         <%= f.radio_button :version_tags_status, 'Met'%> Met
       <% end %>
       <%= f.label :version_tags_status do %>
         <%= f.radio_button :version_tags_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that projects identify each release within their version control system.
            For example, it is SUGGESTED that those using git identify each
            release using git tags. <sup>[version-tags]</sup></span>
      <%= f.text_field :version_tags_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <br><br>
      <h3><i>ChangeLog</i></h3>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :changelog_status do %>
         <%= f.radio_button :changelog_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :changelog_status do %>
         <%= f.radio_button :changelog_status, 'Met'%> Met
       <% end %>
       <%= f.label :changelog_status do %>
         <%= f.radio_button :changelog_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST provide a "ChangeLog" (a human-readable summary of major changes in each release).
            The ChangeLog MUST NOT be the output of the version control log of every change
            (e.g., the "git log" command is not a ChangeLog). <sup>[changelog]</sup></span>
      <%= f.text_field :changelog_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :changelog_vulns_status do %>
         <%= f.radio_button :changelog_vulns_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :changelog_vulns_status do %>
         <%= f.radio_button :changelog_vulns_status, 'Met'%> Met
       <% end %>
       <%= f.label :changelog_vulns_status do %>
         <%= f.radio_button :changelog_vulns_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
        <span>The ChangeLog MUST identify whether the new release fixes any publicly
              known vulnerabilities. <sup>[changelog-vulns]</sup></span>
        <%= f.text_field :changelog_vulns_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>
      <br>

      <span class='criteria-desc'>The ChangeLog MAY implmented in a variety of ways. The ChangeLog MAY be a separate file
            (e.g., "ChangeLog" or "changelog") and the filename MAY be followed by an extension such as
            ".txt", ".md", or ".html". The ChangeLog MAY instead use version control system mechanisms
            such as the GitHub Releases workflow.<br>
            <b>Rationale</b>: ChangeLogs are important because they help users decide whether or not they
            will want to update, and what the impact would be (e.g., if the new release fixes vulnerabilities).</span>

      <br><br><br>
      <h2 class="center h2">Reporting</h2>
      <h3><i>Bug-reporting process</i></h3>

      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :report_url_status do %>
         <%= f.radio_button :report_url_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :report_url_status do %>
         <%= f.radio_button :report_url_status, 'Met'%> Met
       <% end %>
       <%= f.label :report_url_status do %>
         <%= f.radio_button :report_url_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>If an issue tracker is used, please provide its URL. <sup>[report-url]</sup></span>
      <%= f.text_field :report_url_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :report_tracker_status do %>
         <%= f.radio_button :report_tracker_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :report_tracker_status do %>
         <%= f.radio_button :report_tracker_status, 'Met'%> Met
       <% end %>
       <%= f.label :report_tracker_status do %>
         <%= f.radio_button :report_tracker_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that an issue tracker be used for tracking
            individual issues. <sup>[report-tracker]</sup></span>
      <%= f.text_field :report_tracker_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :report_process_status do %>
         <%= f.radio_button :report_process_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :report_process_status do %>
         <%= f.radio_button :report_process_status, 'Met'%> Met
       <% end %>
       <%= f.label :report_process_status do %>
         <%= f.radio_button :report_process_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST provide a process for users to submit bug reports
            (e.g., using an issue tracker or a mailing list). <sup>[report-process]</sup></span>
      <%= f.text_field :report_process_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :report_responses_status do %>
         <%= f.radio_button :report_responses_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :report_responses_status do %>
         <%= f.radio_button :report_responses_status, 'Met'%> Met
       <% end %>
       <%= f.label :report_responses_status do %>
         <%= f.radio_button :report_responses_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>Developers MUST respond to most bug reports submitted in the last
            2-12 months (inclusive); the response need not include a fix. <sup>[report-responses]</sup></span>
      <%= f.text_field :report_responses_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :enhancement_responses_status do %>
         <%= f.radio_button :enhancement_responses_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :enhancement_responses_status do %>
         <%= f.radio_button :enhancement_responses_status, 'Met'%> Met
       <% end %>
       <%= f.label :enhancement_responses_status do %>
         <%= f.radio_button :enhancement_responses_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>Developers SHOULD respond to most enhancement requests in the last 2-12 months
            (inclusive). Developers MAY choose not to respond. <sup>[enhancement-responses]</sup></span>
      <%= f.text_field :enhancement_responses_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :report_archive_status do %>
         <%= f.radio_button :report_archive_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :report_archive_status do %>
         <%= f.radio_button :report_archive_status, 'Met'%> Met
       <% end %>
       <%= f.label :report_archive_status do %>
         <%= f.radio_button :report_archive_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>Reports and responses MUST be archived for later searching. <sup>[report-archive]</sup></span>
      <%= f.text_field :report_archive_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <br><br>

      <h3><i>Vulnerability report process</i></h3>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :vulnerability_report_process_status do %>
         <%= f.radio_button :vulnerability_report_process_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :vulnerability_report_process_status do %>
         <%= f.radio_button :vulnerability_report_process_status, 'Met'%> Met
       <% end %>
       <%= f.label :vulnerability_report_process_status do %>
         <%= f.radio_button :vulnerability_report_process_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST publish the process for reporting vulnerabilities on the project site
            (e.g., a clearly designated mailing address on https://PROJECTSITE/security, often security@SOMEWHERE);
            this MAY be the same as its bug reporting process. <sup>[vulnerability-report-process]</sup></span>
      <%= f.text_field :vulnerability_report_process_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :vulnerability_report_private_status do %>
         <%= f.radio_button :vulnerability_report_private_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :vulnerability_report_private_status do %>
         <%= f.radio_button :vulnerability_report_private_status, 'Met'%> Met
       <% end %>
       <%= f.label :vulnerability_report_private_status do %>
         <%= f.radio_button :vulnerability_report_private_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>If private vulnerability reports are supported, the project MUST include how
            to send the information in a way that is kept private (e.g., a private defect
            report submitted on the web using TLS or an email encrypted using PGP).
            If private vulnerability reports are not supported this criterion is
            automatically met. <sup>[vulnerability-report-private]</sup></span>
      <%= f.text_field :vulnerability_report_private_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :vulnerability_report_response_status do %>
         <%= f.radio_button :vulnerability_report_response_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :vulnerability_report_response_status do %>
         <%= f.radio_button :vulnerability_report_response_status, 'Met'%> Met
       <% end %>
       <%= f.label :vulnerability_report_response_status do %>
         <%= f.radio_button :vulnerability_report_response_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST provide an initial reply to a security vulnerability report
            sent to the project, on average, less than 7 days within the last 6 months.
            (If a project is being spammed on its vulnerability report channel,
            it is okay to only count non-spam messages.) <sup>[vulnerability-report-response]</sup></span>
      <%= f.text_field :vulnerability_report_response_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <br><br><br>
     <h2 class="center h2">Quality</h2>
      <h3><i>Working build system</i></h3>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :build_status do %>
         <%= f.radio_button :build_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :build_status do %>
         <%= f.radio_button :build_status, 'Met'%> Met
       <% end %>
       <%= f.label :build_status do %>
         <%= f.radio_button :build_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>If the software requires building for use, the project MUST provide a working
            build system that can automatically rebuild the software from source code.
            A build system determines what actions need to occur to rebuild the software (and in what order),
            and then performs those steps.  <sup>[build-status]</sup></span>
      <%= f.text_field :build_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :build_common_tools_status do %>
         <%= f.radio_button :build_common_tools_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :build_common_tools_status do %>
         <%= f.radio_button :build_common_tools_status, 'Met'%> Met
       <% end %>
       <%= f.label :build_common_tools_status do %>
         <%= f.radio_button :build_common_tools_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that common tools be used for building the software
            (e.g., Maven, Ant, cmake, the autotools, make, or rake), in which case
            only the instructions to the build system are required (there's no requirement
            to teach people how to use common tools). <sup>[build-common-tools]</sup></span>
      <%= f.text_field :build_common_tools_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :build_oss_tools_status do %>
         <%= f.radio_button :build_oss_tools_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :build_oss_tools_status do %>
         <%= f.radio_button :build_oss_tools_status, 'Met'%> Met
       <% end %>
       <%= f.label :build_oss_tools_status do %>
         <%= f.radio_button :build_oss_tools_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project SHOULD be buildable using only OSS tools. <sup>[build-oss-tools]</sup></span>
      <%= f.text_field :build_oss_tools_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <span class='criteria-desc'><b>Rationale</b>: If a project needs to be built but there is no working build system,
            then potential co-developers will not be able to easily contribute and many security analysis
            tools will be ineffective. Criteria for a working build system are not applicable if there is
            no need to build anything for use.</span>
      <br><br>
      <h3><i>Automated test suite</i></h3>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :test_status do %>
         <%= f.radio_button :test_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :test_status do %>
         <%= f.radio_button :test_status, 'Met'%> Met
       <% end %>
       <%= f.label :test_status do %>
         <%= f.radio_button :test_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST have at least one automated test suite. <sup>[test]</sup></span>
      <%= f.text_field :test_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :test_invocation_status do %>
         <%= f.radio_button :test_invocation_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :test_invocation_status do %>
         <%= f.radio_button :test_invocation_status, 'Met'%> Met
       <% end %>
       <%= f.label :test_invocation_status do %>
         <%= f.radio_button :test_invocation_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>A test suite SHOULD be invocable in a standard way for that language
            (e.g., "make check", "mvn test", and so on). <sup>[test-invocation]</sup></span>
      <%= f.text_field :test_invocation_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :test_most_status do %>
         <%= f.radio_button :test_most_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :test_most_status do %>
         <%= f.radio_button :test_most_status, 'Met'%> Met
       <% end %>
       <%= f.label :test_most_status do %>
         <%= f.radio_button :test_most_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that the test suite cover most (or ideally all) the code branches,
            input fields, and functionality. <sup>[test-most]</sup></span>
      <%= f.text_field :test_most_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>
      <br>
      <span class='criteria-desc'>The project MAY have multiple automated test suites
            (e.g., one that runs quickly, vs. another that is more thorough but requires special equipment).<br>
            <b>Rationale</b>: If a project needs to be built but there is no working build system,
            then potential co-developers will not be able to easily contribute and many security analysis
            tools will be ineffective. Criteria for a working build system are not applicable if there is
            no need to build anything for use.</span>

    <br><br>
    <h3><i>New functionality testing</i></h3>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :test_policy_status do %>
         <%= f.radio_button :test_policy_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :test_policy_status do %>
         <%= f.radio_button :test_policy_status, 'Met'%> Met
       <% end %>
       <%= f.label :test_policy_status do %>
         <%= f.radio_button :test_policy_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST have a general policy (formal or not) that as major
            new functionality is added, tests of that functionality SHOULD
            be added to an automated test suite. <sup>[test-policy]</sup></span>
      <%= f.text_field :test_policy_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :tests_are_added_status do %>
         <%= f.radio_button :tests_are_added_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :tests_are_added_status do %>
         <%= f.radio_button :tests_are_added_status, 'Met'%> Met
       <% end %>
       <%= f.label :tests_are_added_status do %>
         <%= f.radio_button :tests_are_added_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST have evidence that such tests are being added in
            the most recent major changes to the project. Major functionality would typically
            be mentioned in the ChangeLog. (Perfection is not required, merely evidence
            that tests are typically being added in practice.) <sup>[tests-are-added]</sup></span>
      <%= f.text_field :tests_are_added_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :tests_documented_added_status do %>
         <%= f.radio_button :tests_documented_added_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :tests_documented_added_status do %>
         <%= f.radio_button :tests_documented_added_status, 'Met'%> Met
       <% end %>
       <%= f.label :tests_documented_added_status do %>
         <%= f.radio_button :tests_documented_added_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that this be documented in the instructions for change proposals,
            but even an informal rule is acceptable as long as the tests are being
            added in practice. <sup>[tests-documented-added]</sup></span>
      <%= f.text_field :tests_documented_added_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

    <br><br>
    <h3><i>Warning flags</i></h3>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :warnings_status do %>
         <%= f.radio_button :warnings_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :warnings_status do %>
         <%= f.radio_button :warnings_status, 'Met'%> Met
       <% end %>
       <%= f.label :warnings_status do %>
         <%= f.radio_button :warnings_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST enable some compiler warning flagss (e.g. "-Wall"),
            a "safe" language mode (e.g., "use strict", "use warnings", or similar),
            and/or use a separate "linter" tool to look for code quality errors or
            common simple mistakes, if there is at least one OSS tool that can implement
            this criterion in the selected language. <sup>[warnings]</sup></span>
      <%= f.text_field :warnings_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :warnings_fixed_status do %>
         <%= f.radio_button :warnings_fixed_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :warnings_fixed_status do %>
         <%= f.radio_button :warnings_fixed_status, 'Met'%> Met
       <% end %>
       <%= f.label :warnings_fixed_status do %>
         <%= f.radio_button :warnings_fixed_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The project MUST address the issues that are found (by fixing them or
            marking them in the source code as false positives). Ideally there would be no warnings,
            but a project MAY accept some warnings (typically less than 1 warning
            per 100 lines or less than 10 warnings). <sup>[warnings-fixed]</sup></span>
      <%= f.text_field :warnings_fixed_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :warnings_strict_status do %>
         <%= f.radio_button :warnings_strict_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :warnings_strict_status do %>
         <%= f.radio_button :warnings_strict_status, 'Met'%> Met
       <% end %>
       <%= f.label :warnings_strict_status do %>
         <%= f.radio_button :warnings_strict_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that projects be maximally strict, but this is not
            always practical. <sup>[warnings-strict]</sup></span>
      <%= f.text_field :warnings_strict_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

    <br><br><br>
    <h2 class="center h2">Security</h2>
    <h3><i>Secure development knowledge</i></h3>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :know_secure_design_status do %>
       <%= f.radio_button :know_secure_design_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :know_secure_design_status do %>
       <%= f.radio_button :know_secure_design_status, 'Met'%> Met
     <% end %>
     <%= f.label :know_secure_design_status do %>
       <%= f.radio_button :know_secure_design_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>At least one of the primary developers MUST know how to design secure software.
          This requires understanding the following design principles, including the 8 principles from Saltzer and Schroeder:
          economy of mechanism (keep the design as simple and small as practical, e.g., by adopting sweeping simplifications)
          fail-safe defaults (access decisions should deny by default)
          complete mediation (every access that might be limited must be checked for authority and be non-bypassable)
          open design (security mechanisms should not depend on attacker ignorance of its design, but instead on more easily protected and changed information like keys and passwords)
          separation of privilege (multi-factor authentication, such as requiring both a password and a hardware token, is stronger than single-factor authentication)
          least privilege (processes should operate with the least privilege necesssary)
          least common mechanism (the design should minimize the mechanisms common to more than one user and depended on by all users, e.g., directories for temporary files)
          psychological acceptability (the human interface must be designed for ease of use - designing for "least astonishment" can help)
          limited attack surface (the attack surface - the set of the different points where an attacker can try to enter or extract data - should be limited)
          input validation with whitelists (inputs should typically be checked to determine if they are valid before they are accepted;
          this validation should use whitelists (which only accept known-good values),
          not blacklists (which attempt to list known-bad values)) <sup>[know-secure-design]</sup></span>
    <%= f.text_field :know_secure_design_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :know_common_errors_status do %>
       <%= f.radio_button :know_common_errors_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :know_common_errors_status do %>
       <%= f.radio_button :know_common_errors_status, 'Met'%> Met
     <% end %>
     <%= f.label :know_common_errors_status do %>
       <%= f.radio_button :know_common_errors_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>At least one of the primary developers MUST know of common kinds of errors that
          lead to vulnerabilities in this kind of software, as well as at least one method
          to counter or mitigate each of them. Examples (depending on the type of software)
          include SQL injection, OS injection, classic buffer overflow, cross-site scripting,
          missing authentication, and missing authorization. See the CWE/SANS top 25 or OWASP
          Top 10 for commonly-used lists. <sup>[know-common-errors]</sup></span>
    <%= f.text_field :know_common_errors_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>
    <br>
    <span class='criteria-desc'><b>Note: </b>If there is only one developer, by definition that individual is the primary developer.</span>

    <br><br>
    <h3><i>Uses basic good cryptographic practices</i></h3>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_published_status do %>
       <%= f.radio_button :crypto_published_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_published_status do %>
       <%= f.radio_button :crypto_published_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_published_status do %>
       <%= f.radio_button :crypto_published_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>Cryptographic protocols and algorithms used by default in the software AND
          the delivery mechanisms MUST be publicly published and reviewed
          by experts. <sup>[crypto-published]</sup></span>
    <%= f.text_field :crypto_published_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_call_status do %>
       <%= f.radio_button :crypto_call_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_call_status do %>
       <%= f.radio_button :crypto_call_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_call_status do %>
       <%= f.radio_button :crypto_call_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>Application software that is not itself a cryptographic system/library MUST NOT
          implement its own cryptographic functions, but MUST instead call on software
          specifically designed for the purpose. <sup>[crypto-call]</sup></span>
    <%= f.text_field :crypto_call_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_oss_status do %>
       <%= f.radio_button :crypto_oss_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_oss_status do %>
       <%= f.radio_button :crypto_oss_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_oss_status do %>
       <%= f.radio_button :crypto_oss_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>All functionality that depends on cryptography MUST be implementable using
          OSS because its specification meets the Open Standards Requirement for Software
          by the Open Source Initiative. <sup>[crypto-oss]</sup></span>
    <%= f.text_field :crypto_oss_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_keylength_status do %>
       <%= f.radio_button :crypto_keylength_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_keylength_status do %>
       <%= f.radio_button :crypto_keylength_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_keylength_status do %>
       <%= f.radio_button :crypto_keylength_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>The default keylengths MUST meet the NIST minimum requirements at least through the year 2030 (as stated in 2012).
          These minimum bitlengths are: symmetric key 112, factoring modulus 2048, discrete logarithm key 224,
          discrete logarithmic group 2048, elliptic curve 224, and hash 224. See http://www.keylength.com
          for a comparison of keylength recommendations from various organizations.
          The software MUST be configurable so that it will reject smaller keylengths.
          The software MAY allow smaller keylengths in some configurations (ideally it would not, since this allows
          downgrade attacks, but shorter keylengths are sometimes necessary for
          interoperability.) <sup>[crypto-keylength]</sup></span>
    <%= f.text_field :crypto_keylength_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_working_status do %>
       <%= f.radio_button :crypto_working_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_working_status do %>
       <%= f.radio_button :crypto_working_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_working_status do %>
       <%= f.radio_button :crypto_working_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>Security mechanisms MUST NOT on depend cryptographic algorithms that are broken
          or have too-short key lengths (e.g., MD4, MD5, single DES, or RC4).
          It is SUGGESTED that SHA-1 not be used (we are well aware that git uses SHA-1).
          Currently-recommended algorithms include AES and SHA-256/SHA-512. Implementations SHOULD
          support multiple cryptographic algorithms, so users can quickly switch
          if one is broken.  <sup>[crypto-working]</sup></span>
    <%= f.text_field :crypto_working_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_pfs_status do %>
       <%= f.radio_button :crypto_pfs_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_pfs_status do %>
       <%= f.radio_button :crypto_pfs_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_pfs_status do %>
       <%= f.radio_button :crypto_pfs_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>Any key agreement protocol SHOULD implement perfect forward secrecy so a session key
          derived from a set of long-term keys cannot be compromised if one of the long-term keys
          is compromised in the future. <sup>[crypto-pfs]</sup></span>
    <%= f.text_field :crypto_pfs_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_password_storage_status do %>
       <%= f.radio_button :crypto_password_storage_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_password_storage_status do %>
       <%= f.radio_button :crypto_password_storage_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_password_storage_status do %>
       <%= f.radio_button :crypto_password_storage_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>If passwords for later authentication are stored, they MUST be stored as
          iterated hashes with per-user salt. <sup>[crypto-password-storage]</sup></span>
    <%= f.text_field :crypto_password_storage_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :crypto_random_status do %>
       <%= f.radio_button :crypto_random_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :crypto_random_status do %>
       <%= f.radio_button :crypto_random_status, 'Met'%> Met
     <% end %>
     <%= f.label :crypto_random_status do %>
       <%= f.radio_button :crypto_random_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>All keys and nonces MUST be generated using cryptographically random functions,
          and not through non-cryptographically random functions. <sup>[crypto-random]</sup></span>
    <%= f.text_field :crypto_random_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <br>
    <span class="criteria-desc"><b>Note:</b> These criteria do not always apply because some software
                                has no need to directly use cryptographic capabilities.</span>

    <br><br>
    <h3><i>Secured delivery against man-in-the-middle (MITM) attacks</i></h3>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :delivery_mitm_status do %>
       <%= f.radio_button :delivery_mitm_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :delivery_mitm_status do %>
       <%= f.radio_button :delivery_mitm_status, 'Met'%> Met
     <% end %>
     <%= f.label :delivery_mitm_status do %>
       <%= f.radio_button :delivery_mitm_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>The project MUST use a delivery mechanism that counters MITM attacks.
          Using https or ssh+scp is acceptable. An even stronger mechanism is releasing
          the software with digitally signed packages, since that mitigates attacks on the distribution system,
          but this only works if the users can be confident that the public keys for signatures are correct
          and if the users will actually check the signature. <sup>[delivery-mitm]</sup></span>
    <%= f.text_field :delivery_mitm_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :delivery_unsigned_status do %>
       <%= f.radio_button :delivery_unsigned_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :delivery_unsigned_status do %>
       <%= f.radio_button :delivery_unsigned_status, 'Met'%> Met
     <% end %>
     <%= f.label :delivery_unsigned_status do %>
       <%= f.radio_button :delivery_unsigned_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>A cryptographic hash (e.g., a sha1sum) MUST NOT be retrieved over http and
          used without checking for a cryptographic signature, since these hashes
          can be modified in transit. <sup>[delivery-unsigned]</sup></span>
    <%= f.text_field :delivery_unsigned_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>
    <br><br>

    <h3><i>Publicly-known vulnerabilities fixed</i></h3>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :vulnerabilities_fixed_60_days_status do %>
       <%= f.radio_button :vulnerabilities_fixed_60_days_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :vulnerabilities_fixed_60_days_status do %>
       <%= f.radio_button :vulnerabilities_fixed_60_days_status, 'Met'%> Met
     <% end %>
     <%= f.label :vulnerabilities_fixed_60_days_status do %>
       <%= f.radio_button :vulnerabilities_fixed_60_days_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>There MUST be no unpatched vulnerabilities of medium or high severity that
          have been publicly known for more than 60 days. The vulnerability must be patched and
          released by the project itself (patches may be developed elsewhere).
          A vulnerability becomes publicly known (for this purpose) once it has a CVE with
          publicly released non-paywalled information (reported, for example,
          in the National Vulnerability Database) or when the project has been informed and the
          information has been released to the public (possibly by the project). A vulnerability is medium
          to high severity if its CVSS 2.0 base score is 4 or higher.
          <sup>[vulnerabilities-fixed-60-days]</sup></span>
    <%= f.text_field :vulnerabilities_fixed_60_days_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>

    <hr>
    <div class="row">
    <div class="col-md-3 criteria-radio">
     <%= f.label :vulnerabilities_critical_fixed_status do %>
       <%= f.radio_button :vulnerabilities_critical_fixed_status, '?', :checked => true %> &nbsp;?&nbsp;
     <% end %>
     <%= f.label :vulnerabilities_critical_fixed_status do %>
       <%= f.radio_button :vulnerabilities_critical_fixed_status, 'Met'%> Met
     <% end %>
     <%= f.label :vulnerabilities_critical_fixed_status do %>
       <%= f.radio_button :vulnerabilities_critical_fixed_status, 'Unmet'%> Unmet
     <% end %>
    </div>
    <div class='col-md-9 criteria-desc'>
    <span>Projects SHOULD fix all critical vulnerabilities rapidly after they
          are reported. <sup>[vulnerabilities-critical-fixed]</sup></span>
    <%= f.text_field :vulnerabilities_critical_fixed_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
    </div>
    </div>
    <br>

    <span class='criteria-desc'><b>Note</b>: this means that users might be left vulnerable to all attackers
      worldwide for up to 60 days. This criterion is often much easier to meet than what Google
      recommends in Rebooting responsible disclosure, because Google recommends that the 60-day
      period start when the project is notified even if the report is not public.<br>
      <b>Rationale</b>: We intentionally chose to start measurement from the time of public knowledge,
      and not from the time reported to the project, because this is much easier to measure and
      verify by those outside the project.</span>

    <br><br><br>
    <h2 class="center h2">Security Analysis</h2>
    <h3><i>Static code analysis</i></h3>

     <div class="row">
     <div class="col-md-3 criteria-radio">
      <%= f.label :static_analysis_status do %>
        <%= f.radio_button :static_analysis_status, '?', :checked => true %> &nbsp;?&nbsp;
      <% end %>
      <%= f.label :static_analysis_status do %>
        <%= f.radio_button :static_analysis_status, 'Met'%> Met
      <% end %>
      <%= f.label :static_analysis_status do %>
        <%= f.radio_button :static_analysis_status, 'Unmet'%> Unmet
      <% end %>
     </div>
     <div class='col-md-9 criteria-desc'>
     <span>At least one static code analysis tool MUST be applied to any proposed major production
           release of the software before its release, if there is at least one OSS tool that
           implement this criterion in the selected language. A static code analysis tool examines
           the software code (as source code, intermediate code, or executable) without executing it
           with specific inputs. For purposes of this criterion compiler warnings and "safe" language
           modes do not count as a static code analysis tool (these typically avoid deep analysis because
           speed is vital). Examples of such static code analysis tools include cppcheck, the clang static analyzer,
           FindBugs (including FindSecurityBugs), PMD, Brakeman, Coverity Quality Analyzer,
           and the HP Fortify Static Code Analyzer.  <sup>[static-analysis]</sup></span>
     <%= f.text_field :static_analysis_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
     </div>
     </div>
     <br>
     <span class='criteria-desc'><b>Note: </b>The analysis tool(s) MAY be focused on looking
                 for security vulnerabilities, but this is not required.</span>

     <hr>
     <div class="row">
     <div class="col-md-3 criteria-radio">
      <%= f.label :static_analysis_common_vulnerabilities_status do %>
        <%= f.radio_button :static_analysis_common_vulnerabilities_status, '?', :checked => true %> &nbsp;?&nbsp;
      <% end %>
      <%= f.label :static_analysis_common_vulnerabilities_status do %>
        <%= f.radio_button :static_analysis_common_vulnerabilities_status, 'Met'%> Met
      <% end %>
      <%= f.label :static_analysis_common_vulnerabilities_status do %>
        <%= f.radio_button :static_analysis_common_vulnerabilities_status, 'Unmet'%> Unmet
      <% end %>
     </div>
     <div class='col-md-9 criteria-desc'>
     <span>It is SUGGESTED that the tool include rules or approaches to look for
           common vulnerabilities in the analyzed language or environment.
           <sup>[static-analysis-common-vulnerabilities]</sup></span>
     <%= f.text_field :static_analysis_common_vulnerabilities_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
     </div>
     </div>

     <hr>
     <div class="row">
     <div class="col-md-3 criteria-radio">
      <%= f.label :static_analysis_fixed_status do %>
        <%= f.radio_button :static_analysis_fixed_status, '?', :checked => true %> &nbsp;?&nbsp;
      <% end %>
      <%= f.label :static_analysis_fixed_status do %>
        <%= f.radio_button :static_analysis_fixed_status, 'Met'%> Met
      <% end %>
      <%= f.label :static_analysis_fixed_status do %>
        <%= f.radio_button :static_analysis_fixed_status, 'Unmet'%> Unmet
      <% end %>
     </div>
     <div class='col-md-9 criteria-desc'>
     <span>All confirmed medium and high severity exploitable vulnerabilities discovered with static code analysis MUST be fixed.
           A vulnerability is medium to high severity if its CVSS 2.0 is 4 or higher.
           <sup>[static-analysis-fixed]</sup></span>
     <%= f.text_field :static_analysis_fixed_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
     </div>
     </div>

     <hr>
     <div class="row">
     <div class="col-md-3 criteria-radio">
      <%= f.label :static_analysis_often_status do %>
        <%= f.radio_button :static_analysis_often_status, '?', :checked => true %> &nbsp;?&nbsp;
      <% end %>
      <%= f.label :static_analysis_often_status do %>
        <%= f.radio_button :static_analysis_often_status, 'Met'%> Met
      <% end %>
      <%= f.label :static_analysis_often_status do %>
        <%= f.radio_button :static_analysis_often_status, 'Unmet'%> Unmet
      <% end %>
     </div>
     <div class='col-md-9 criteria-desc'>
     <span>It is SUGGESTED that static source code analysis occur on every commit or at least daily.
           <sup>[static-analysis-often]</sup></span>
     <%= f.text_field :static_analysis_often_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
     </div>
     </div>
      <br><br>

     <h3><i>Dynamic analysis</i></h3>

      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :dynamic_analysis_status do %>
         <%= f.radio_button :dynamic_analysis_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :dynamic_analysis_status do %>
         <%= f.radio_button :dynamic_analysis_status, 'Met'%> Met
       <% end %>
       <%= f.label :dynamic_analysis_status do %>
         <%= f.radio_button :dynamic_analysis_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>At least one dynamic analysis tool MUST be applied to any proposed major production
            release of the software before its release. A dynamic analysis tool examines the software
            by executing it with specific inputs. For example, the project MAY use a fuzzing tool
            (e.g., American Fuzzy Lop) or a web application scanner (e.g., OWASP ZAP or w3af).
            For purposes of this criterion the dynamic analysis tool MUST vary the inputs in some way to
            look for various kinds of problems or be an automated test suite with at
            least 80% branch coverage. <sup>[dynamic-analysis]</sup></span>
      <%= f.text_field :dynamic_analysis_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :dynamic_analysis_unsafe_status do %>
         <%= f.radio_button :dynamic_analysis_unsafe_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :dynamic_analysis_unsafe_status do %>
         <%= f.radio_button :dynamic_analysis_unsafe_status, 'Met'%> Met
       <% end %>
       <%= f.label :dynamic_analysis_unsafe_status do %>
         <%= f.radio_button :dynamic_analysis_unsafe_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that if the software is application-level software written
            using a memory-unsafe language (such as C or C++) then at least one tool to
            detect memory safety problems MUST be used during at least one dynamic tool use,
            e.g., Address Sanitizer (ASAN) or valgrind. If the software is not application-level,
            or is not in a memory-unsafe language, then this criterion is
            automatically met. <sup>[dynamic-analysis-unsafe]</sup></span>
      <%= f.text_field :dynamic_analysis_unsafe_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :dynamic_analysis_enable_assertions_status do %>
         <%= f.radio_button :dynamic_analysis_enable_assertions_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :dynamic_analysis_enable_assertions_status do %>
         <%= f.radio_button :dynamic_analysis_enable_assertions_status, 'Met'%> Met
       <% end %>
       <%= f.label :dynamic_analysis_enable_assertions_status do %>
         <%= f.radio_button :dynamic_analysis_enable_assertions_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>It is SUGGESTED that the software include many run-time assertions
            that are checked during dynamic analysis.
            <sup>[dynamic-analysis-enable-assertiions]</sup></span>
      <%= f.text_field :dynamic_analysis_enable_assertions_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>

      <hr>
      <div class="row">
      <div class="col-md-3 criteria-radio">
       <%= f.label :dynamic_analysis_fixed_status do %>
         <%= f.radio_button :dynamic_analysis_fixed_status, '?', :checked => true %> &nbsp;?&nbsp;
       <% end %>
       <%= f.label :dynamic_analysis_fixed_status do %>
         <%= f.radio_button :dynamic_analysis_fixed_status, 'Met'%> Met
       <% end %>
       <%= f.label :dynamic_analysis_fixed_status do %>
         <%= f.radio_button :dynamic_analysis_fixed_status, 'Unmet'%> Unmet
       <% end %>
      </div>
      <div class='col-md-9 criteria-desc'>
      <span>The analysis tool(s) MAY be focused on looking for security vulnerabilities, but this is not required.<br>
            All confirmed medium and high severity exploitable vulnerabilities discovered
            with dynamic code analysis MUST be fixed. A vulnerability is medium to high
            severity if its CVSS 2.0 base score is 4 or higher. <sup>[dynamic-analysis-fixed]</sup></span>
      <%= f.text_field :dynamic_analysis_fixed_justification, class:"form-control", hide_label: true, placeholder:'Please Explain' %>
      </div>
      </div>
      <br>
      <span class="criteria-desc"><b>Rationale: </b>Static source code analysis and dynamic analysis tend
                  to find different kinds of defects (including defects that lead to vulnerabilities),
                  so combining them is more likely to be effective.</span>


      <br>
      <hr class='col-md-11'>
      <%= f.text_area :general_comments, class:"form-control",  hide_label: true, placeholder:'Additional Comments' %>
      <br>
      <%= f.submit 'Submit', class:"btn btn-primary" %>
    <% end %>













    <script>
      function justification_field(criteria) {
        var criteria_just = "#project_" + criteria + "_justification";
        var criteria_status = "#project_" + criteria + "_status";
        var justification_value = document.getElementById("project_"+criteria+"_justification").value;

        if ( $(criteria_status+"_").is(':checked') && justification_value.length == 0 )
            $(criteria_just).hide();

        $('input[name="project['+criteria+'_status]"]').click(function()
            {
              if ( $(criteria_status + "_met").is(':checked'))
                   $(criteria_just).show('fast');
              if ( $(criteria_status+"_unmet").is(':checked'))
                   $(criteria_just).show('fast');
              if ( $(criteria_status+"_").is(':checked') && justification_value.length == 0)
                   $(criteria_just).hide('fast');
            });
      }


      // OSS PROJECT BASICS
      // Basic project website content
      justification_field("description_sufficient");
      justification_field("interact");
      justification_field("contribution")
      justification_field("contribution_criteria")
      // OSS license
      justification_field("license_location");
      justification_field("oss_license");
      justification_field("oss_license_osi");
      // Documentation
      justification_field("documentation_basics");
      justification_field("documentation_interface");
      justification_field("oss_license_osi");

      // CHANGE CONTROL
      // Public version-controlled source repository
      justification_field("repo_url");
      justification_field("repo_track");
      justification_field("repo_interim");
      justification_field("repo_distributed");
      // Version Numbering
      justification_field("version_unique");
      justification_field("version_semver");
      justification_field("version_tags");
      // ChangeLog
      justification_field("changelog");
      justification_field("changelog_vulns");

      //REPORTING
      // Bug-reporting process
      justification_field("report_url");
      justification_field("report_tracker");
      justification_field("report_process");
      justification_field("report_responses");
      justification_field("enhancement_responses");
      justification_field("report_archive");
      // Vulnerability report process
      justification_field("vulnerability_report_process");
      justification_field("vulnerability_report_private");
      justification_field("vulnerability_report_response");

      //QUALITY CONTROL
      //Working build system
      justification_field("build");
      justification_field("build_common_tools");
      justification_field("build_oss_tools");
      //Automated test suite
      justification_field("test");
      justification_field("test_invocation");
      justification_field("test_most");
      //New functionality testing
      justification_field("test_policy");
      justification_field("tests_are_added");
      justification_field("tests_documented_added");
      justification_field("warnings");
      justification_field("warnings_fixed");
      justification_field("warnings_strict");

      //SECURITY
      //Secure development knowledge
      justification_field("know_secure_design");
      justification_field("know_common_errors");
      //Uses basic good cryptographic practices
      justification_field("crypto_published");
      justification_field("crypto_call");
      justification_field("crypto_oss");
      justification_field("crypto_keylength");
      justification_field("crypto_working");
      justification_field("crypto_pfs");
      justification_field("crypto_password_storage");
      justification_field("crypto_random");
      justification_field("delivery_mitm");
      justification_field("delivery_unsigned");
      justification_field("vulnerabilities_fixed_60_days");
      justification_field("vulnerabilities_critical_fixed");

      //SECURITY ANALYSIS
      //Static code analysis
      justification_field("static_analysis");
      justification_field("static_analysis_common_vulnerabilities");
      justification_field("static_analysis_fixed");
      justification_field("static_analysis_often");
      //Dynamic Analysis
      justification_field("dynamic_analysis");
      justification_field("dynamic_analysis_unsafe");
      justification_field("dynamic_analysis_enable_assertions");
      justification_field("dynamic_analysis_fixed");



    </script>

  </div>
</div>
