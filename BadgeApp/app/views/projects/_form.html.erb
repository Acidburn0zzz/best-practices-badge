<div class="row">
  <div class="col-md-7 col-md-offset-1">

  <%= form_for(@project) do |f| %>
    <%= render 'shared/error_messages', object: f.object %>

    <h2 class="center">OSS Project Basics</h2>

    <h3><i>Identification</i></h3>
      <span>What is the human-readable name of the project (note that other
            projects may use the same name)?</span>
      <%= f.text_field :name, class:"form-control", placeholder:'OSS Project Name' %>

      <span>What is a brief description of the project, including key comments
            about it (for use when displaying badge information)?</span>
      <%= f.text_area :description, class:"form-control", hide_label: true, placeholder:'Project Description' %>

      <span>What is the URL for the project (as a whole)?</span>
      <%= f.text_field :project_url, class:"form-control", hide_label: true, placeholder:'Project Website URL' %>

      <span>What is the URL for the version control repository
            (it may the same as the project URL)?</span>
      <%= f.text_field :repo_url, class:"form-control", hide_label: true, placeholder:'Project Repo URL' %>

    <h3><i>Basic Project Website Content</i></h3>
      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "description_sufficient", desc: %{
The project website MUST succinctly describe what the software does
(what problem does it solve?), in language that potential users can
understand (e.g., it uses minimal jargon).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "interact", desc: %{
The project website MUST provide information on how to: obtain,provide feedback
(as bug reports or enhancements), and contribute to the sofware.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "contribution", desc: %{
The project website MUST provide information on how to: obtain,provide feedback
(as bug reports or enhancements), and contribute to the sofware.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "contribution_criteria", desc: %{
The project website MUST provide information on how to: obtain, provide feedback
(as bug reports or enhancements), and contribute to the sofware. <sup>[contribution-criteria]
}}) %>
      <br><br>

      <h3><i>OSS License</i></h3>
      <span>What license(s) is the project released under? Please use <a href="https://spdx.org/licenses/">SPDX format</a> (examples include "Apache-2.0", "BSD-2-Clause", "BSD-3-Clause", "GPL-2.0+", "LGPL-3.0+", and "MIT")</span>
      <%= f.text_field :license, class:"form-control", hide_label: true, placeholder:'OSS License', list: "license_list" %>
     <!-- Some examples from http://wiki.spdx.org/view/FileNoticeExamples -->
     <datalist id="license_list">
        <option value="Apache-2.0">Apache-2.0 {Apache License 2.0}</option>
        <option value="BSD-3-Clause">BSD-3-Clause {BSD 3-clause "New" or "Revised" License}</option>
        <option value="BSD-2-Clause">BSD-2-Clause {BSD 2-clause "Simplified" License}</option>
        <option value="BSD-2-Clause-FreeBSD">BSD-2-Clause-FreeBSD {BSD 2-clause FreeBSD License}</option>
        <option value="CC0-1.0">CC0-1.0 {Creative Commons Zero v1.0 Universal}</option>
        <option value="GPL-2.0">GPL-2.0 {GNU General Public License version 2.0 only}</option>
        <option value="GPL-2.0+">GPL-2.0+ {GNU General Public License version 2.0 or later}</option>
        <option value="GPL-3.0">GPL-3.0 {GNU General Public License version 3.0 only}</option>
        <option value="GPL-3.0+">GPL-3.0+ {GNU General Public License version 3.0 or later}</option>
        <option value="LGPL-2.1+">LGPL-2.1 {GNU Lesser General Public License version 2.1 only}</option>
        <option value="LGPL-2.1+">LGPL-2.1+ {GNU Lesser General Public License version 2.1 or later}</option>
        <option value="LGPL-3.0+">LGPL-3.0 {GNU Lesser General Public License version 3.0 only}</option>
        <option value="LGPL-3.0+">LGPL-3.0+ {GNU Lesser General Public License version 3.0 or later}</option>
        <option value="MIT">MIT</option>
        <option value="(GPL-3.0+ WITH Bison-Exception)">(GPL-3.0+ WITH Bison-Exception)</option>
        <option value="(LGPL-2.0+ AND AML)">(LGPL-2.0+ AND AML) {must meet both the GNU Lesser General Public License version 2.1 or later AND the Apple MIT License}</option>
        <option value="(MPL-1.1 OR GPL-2.0+ OR LGPL-2.1+)">(MPL-1.1 OR GPL-2.0+ OR LGPL-2.1+)</option>
     </datalist>
      <br>
      <hr>

       <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "oss_license", desc: %{
The software MUST be released as OSS. For our purposes, this means that the license MUST be at least one of the following:
an approved license by the Open Source Initiative (OSI)
a free license as approved by the Free Software Foundation (FSF)
a free license acceptable to Debian main
a "good" license according to Fedora. <sup>[oss-license]
}}) %>
       <hr>

       <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "oss_license_osi", desc: %{
It is SUGGESTED that any required license(s) be OSI-approved.
}}) %>
       <hr>


       <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "license_location", desc: %{
License(s) MUST be posted in a standard location (e.g., as a top-level file named LICENSE or COPYING).
License filenames MAY be followed by an extension such as ".txt" or ".md")
}}) %>

      <br>
      <span class='criteria-desc'><b>Note</b>: We intend for the automated tool to focus on identifying common OSS licenses such as:
        CC0, MIT, BSD 2-clause, BSD 3-clause revised, Apache 2.0, Lesser GNU General Public License (LGPL),
        and the GNU General Public License (GPL).<br>
        <b>Rationale</b>: These criteria are designed for OSS projects, so we need to ensure
        that they're only used where they apply. Some projects are thought of as OSS
        yet are not actually released as OSS (e.g., they might not have any license,
        in which case the defaults of the country's legal system apply, or they might use a non-OSS license).
        Unusual licenses can cause long-term problems for OSS projects and are more difficult for tools to handle.
        We expect that that "higher-level" criteria would set a higher bar, e.g., that it must be released under an OSI-approved license.</span>

      <br><br>
      <h3><i>Documentation</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "documentation_basics", desc: %{
The project MUST provide basic documentation for the software in some media (such as text or video) that includes:
how to install it, how to start it, how to use it (possibly with a tutorial using examples), and
how to use it securely (e.g., what to do and what not to do) if that is an appropriate topic for the software.
The security documentation need not be long (it is better for the software to be designed to be secure by default).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "documentation_interface", desc: %{
The project MUST include reference documentation that describes its interface.
(The project MAY use hypertext links to non-project material as the included
documentation,
as long as the linked-to information is available and meets the requirements.)
}}) %>

      <br><br><br>

      <h2 class="center h2">Change Control</h2>
      <h3><i>Public version-controlled source repository</i></h3>

       <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "repo_url", desc: %{
The project MUST have a version-controlled source repository that is publicly readable and has a URL (the URL MAY be the same as the project URL).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "repo_track", desc: %{
The source repository MUST track what changes were made, who made the changes,
and when the changes were made.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "repo_interim", desc: %{
The source repository MUST include interim versions for review between releases;
it MUST NOT include only final releases.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "repo_distributed", desc: %{
It is SUGGESTED that common distributed version control software is used (e.g., git).
Git is not specifically required and projects can use centralized version control software
(such as subversion) with justification.
}}) %>

      <br>
      TODO: ??? Add radio buttons here.
      <br>
      <span class='criteria-desc'>The project MAY use private (non-public)
            branches in specific cases while the change is not publicly released
            (e.g., for fixing a vulnerability before it is revealed to the public).<br>
            <b>Rationale</b>: This enables easy tracking
            and public review. Some OSS projects do not use a version control system or do not provide public access to it.
            The lack of a public version control repository makes it unnecessarily difficult to contribute to a project
            and to track its progress in detail.</span>

      <br><br>
      <h3><i>Version numbering</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "version_unique", desc: %{
The project MUST have a unique version number for each release intended
to be used by users.
}}) %>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "version_semver", desc: %{
It is SUGGESTED that the Semantic Versioning (SemVer) format is
used for releases.
Commit IDs (or similar) MAY be used as as version numbers. They are unique, but note that these can
cause problems for users as they may not be able to determine whether or not they're up-to-date.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "version_tags", desc: %{
It is SUGGESTED that projects identify each release within their version control system.
For example, it is SUGGESTED that those using git identify each
release using git tags.
}}) %>

      <br><br>
      <h3><i>ChangeLog</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "changelog", desc: %{
The project MUST provide a "ChangeLog" (a human-readable summary of major changes in each release).
The ChangeLog MUST NOT be the output of the version control log of every change
(e.g., the "git log" command is not a ChangeLog).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "changelog_vulns", desc: %{
The ChangeLog MUST identify whether the new release fixes any publicly
known vulnerabilities.
}}) %>
      <hr>

      <span class='criteria-desc'>The ChangeLog MAY be implemented in a variety of ways. The ChangeLog MAY be a separate file
            (e.g., "ChangeLog" or "changelog") and the filename MAY be followed by an extension such as
            ".txt", ".md", or ".html". The ChangeLog MAY instead use version control system mechanisms
            such as the GitHub Releases workflow.<br>
            <b>Rationale</b>: ChangeLogs are important because they help users decide whether or not they
            will want to update, and what the impact would be (e.g., if the new release fixes vulnerabilities).</span>

      <br><br><br>
      <h2 class="center h2">Reporting</h2>
      <h3><i>Bug-reporting process</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "report_url", desc: %{
If an issue tracker is used, please provide its URL.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "report_tracker", desc: %{
It is SUGGESTED that an issue tracker be used for tracking individual issues.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "report_process", desc: %{
The project MUST provide a process for users to submit bug reports
(e.g., using an issue tracker or a mailing list).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "report_responses", desc: %{
Developers MUST respond to most bug reports submitted in the last
2-12 months (inclusive); the response need not include a fix.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "enhancement_responses", desc: %{
Developers SHOULD respond to most enhancement requests in the last 2-12 months
(inclusive). Developers MAY choose not to respond.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "report_archive", desc: %{
Reports and responses MUST be archived for later searching.
}}) %>

      <br><br>

      <h3><i>Vulnerability report process</i></h3>
      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "vulnerability_report_process", desc: %{
The project MUST publish the process for reporting vulnerabilities on the project site
(e.g., a clearly designated mailing address on https://PROJECTSITE/security, often security@SOMEWHERE);
this MAY be the same as its bug reporting process.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "vulnerability_report_private", desc: %{
If private vulnerability reports are supported, the project MUST include how
to send the information in a way that is kept private (e.g., a private defect
report submitted on the web using TLS or an email encrypted using PGP).
If private vulnerability reports are not supported this criterion is
automatically met.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "vulnerability_report_response", desc: %{
The project MUST provide an initial reply to a security vulnerability report
sent to the project, on average, less than 7 days within the last 6 months.
(If a project is being spammed on its vulnerability report channel,
it is okay to only count non-spam messages.)
}}) %>

     <br><br><br>
     <h2 class="center h2">Quality</h2>
     <h3><i>Working build system</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "build", desc: %{
If the software requires building for use, the project MUST provide a working
build system that can automatically rebuild the software from source code.
A build system determines what actions need to occur to rebuild the software (and in what order), and then performs those steps.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "build_common_tools", desc: %{
It is SUGGESTED that common tools be used for building the software
(e.g., Maven, Ant, cmake, the autotools, make, or rake), in which case
only the instructions to the build system are required (there's no requirement
to teach people how to use common tools).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "build_oss_tools", desc: %{
The project SHOULD be buildable using only OSS tools.
}}) %>

      <span class='criteria-desc'><b>Rationale</b>: If a project needs to be built but there is no working build system,
            then potential co-developers will not be able to easily contribute and many security analysis
            tools will be ineffective. Criteria for a working build system are not applicable if there is
            no need to build anything for use.</span>

      <br><br>

      <h3><i>Automated test suite</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "test", desc: %{
The project MUST have at least one automated test suite.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "test_invocation", desc: %{
A test suite SHOULD be invocable in a standard way for that language
(e.g., "make check", "mvn test", and so on).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "test_most", desc: %{
It is SUGGESTED that the test suite cover most (or ideally all)
the code branches, input fields, and functionality.
}}) %>

      <br>
      <span class='criteria-desc'>The project MAY have multiple automated test suites
            (e.g., one that runs quickly, vs. another that is more thorough but requires special equipment).<br>
            <b>Rationale</b>: If a project needs to be built but there is no working build system,
            then potential co-developers will not be able to easily contribute and many security analysis
            tools will be ineffective. Criteria for a working build system are not applicable if there is
            no need to build anything for use.</span>

    <br><br>
    <h3><i>New functionality testing</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "test_policy", desc: %{
The project MUST have a general policy (formal or not) that as major
new functionality is added, tests of that functionality SHOULD
be added to an automated test suite.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "tests_are_added", desc: %{
The project MUST have evidence that such tests are being added in
the most recent major changes to the project. Major functionality would typically
be mentioned in the ChangeLog. (Perfection is not required, merely evidence
that tests are typically being added in practice.)
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "tests_documented_added", desc: %{
It is SUGGESTED that this be documented in the instructions for change proposals,
but even an informal rule is acceptable as long as the tests are being
added in practice.
}}) %>

    <br><br>
    <h3><i>Warning flags</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "warnings", desc: %{
The project MUST enable some compiler warning flags (e.g. "-Wall"),
a "safe" language mode (e.g., "use strict", "use warnings", or similar),
and/or use a separate "linter" tool to look for code quality errors or
common simple mistakes, if there is at least one OSS tool that can implement
this criterion in the selected language.
}}) %>

      <hr>
      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "warnings_fixed", desc: %{
The project MUST address the issues that are found (by fixing them or
marking them in the source code as false positives). Ideally there would be no warnings,
but a project MAY accept some warnings (typically less than 1 warning
per 100 lines or less than 10 warnings).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
               criteria: "warnings_strict", desc: %{
It is SUGGESTED that projects be maximally strict, but this is not
always practical.
}}) %>

    <br><br><br>
    <h2 class="center h2">Security</h2>
    <h3><i>Secure development knowledge</i></h3>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "know_secure_design", desc: %{
At least one of the primary developers MUST know how to design secure software.
This requires understanding the following design principles, including the 8 principles from Saltzer and Schroeder:
<ul>
<li>economy of mechanism (keep the design as simple and small as practical, e.g., by adopting sweeping simplifications)
<li>fail-safe defaults (access decisions should deny by default)
<li>complete mediation (every access that might be limited must be checked for authority and be non-bypassable)
<li>open design (security mechanisms should not depend on attacker ignorance of its design, but instead on more easily protected and changed information like keys and passwords)
<li>separation of privilege (multi-factor authentication, such as requiring both a password and a hardware token, is stronger than single-factor authentication)
<li>least privilege (processes should operate with the least privilege necesssary)
<li>least common mechanism (the design should minimize the mechanisms common to more than one user and depended on by all users, e.g., directories for temporary files)
<li>psychological acceptability (the human interface must be designed for ease of use - designing for "least astonishment" can help)
<li>limited attack surface (the attack surface - the set of the different points where an attacker can try to enter or extract data - should be limited)
<li>input validation with whitelists (inputs should typically be checked to determine if they are valid before they are accepted;
<li>this validation should use whitelists (which only accept known-good values),
not blacklists (which attempt to list known-bad values))
</ul>
}}) %>

    <hr>
    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "know_common_errors", desc: %{
At least one of the primary developers MUST know of common kinds of errors that
lead to vulnerabilities in this kind of software, as well as at least one method
to counter or mitigate each of them. Examples (depending on the type of software)
include SQL injection, OS injection, classic buffer overflow, cross-site scripting,
missing authentication, and missing authorization. See the CWE/SANS top 25 or OWASP
Top 10 for commonly-used lists.
<b>Note: </b>If there is only one developer, by definition that individual is the primary developer.</span>
}}) %>

    <br><br><br>
    <h3><i>Uses basic good cryptographic practices</i></h3>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_published", desc: %{
Cryptographic protocols and algorithms used by default in the software AND
the delivery mechanisms MUST be publicly published and reviewed
by experts.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_call", desc: %{
Application software that is not itself a cryptographic system/library MUST NOT
implement its own cryptographic functions, but MUST instead call on software
specifically designed for the purpose.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_oss", desc: %{
All functionality that depends on cryptography MUST be implementable using
OSS because its specification meets the Open Standards Requirement for Software
by the Open Source Initiative.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_keylength", desc: %{
The default keylengths MUST meet the NIST minimum requirements at least through the year 2030 (as stated in 2012).
These minimum bitlengths are: symmetric key 112, factoring modulus 2048, discrete logarithm key 224,
discrete logarithmic group 2048, elliptic curve 224, and hash 224. See http://www.keylength.com
for a comparison of keylength recommendations from various organizations.
The software MUST be configurable so that it will reject smaller keylengths.
The software MAY allow smaller keylengths in some configurations (ideally it would not, since this allows
downgrade attacks, but shorter keylengths are sometimes necessary for
interoperability.)
}}) %>
    <hr>

<!-- TODO: Mixed MUST NOT and SUGGESTED and SHOULD -->
    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_working", desc: %{
Security mechanisms MUST NOT on depend cryptographic algorithms that are broken
or have too-short key lengths (e.g., MD4, MD5, single DES, or RC4).
It is SUGGESTED that SHA-1 not be used (we are well aware that git uses SHA-1).
Currently-recommended algorithms include AES and SHA-256/SHA-512. Implementations SHOULD
support multiple cryptographic algorithms, so users can quickly switch
if one is broken.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_pfs", desc: %{
Any key agreement protocol SHOULD implement perfect forward secrecy so a session key
derived from a set of long-term keys cannot be compromised if one of the long-term keys
is compromised in the future.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_password_storage", desc: %{
If passwords for later authentication are stored, they MUST be stored as
iterated hashes with per-user salt.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "crypto_random", desc: %{
All keys and nonces MUST be generated using cryptographically random functions,
and not through non-cryptographically random functions.
}}) %>

    <br>
    <span class="criteria-desc"><b>Note:</b> These criteria do not always apply because some software
                                has no need to directly use cryptographic capabilities.</span>

    <br><br>
    <h3><i>Secured delivery against man-in-the-middle (MITM) attacks</i></h3>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "delivery_mitm", desc: %{
The project MUST use a delivery mechanism that counters MITM attacks.
Using https or ssh+scp is acceptable. An even stronger mechanism is releasing
the software with digitally signed packages, since that mitigates attacks on the distribution system,
but this only works if the users can be confident that the public keys for signatures are correct
and if the users will actually check the signature.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "delivery_unsigned", desc: %{
A cryptographic hash (e.g., a sha1sum) MUST NOT be retrieved over http and
used without checking for a cryptographic signature, since these hashes
can be modified in transit.
}}) %>

    <h3><i>Publicly-known vulnerabilities fixed</i></h3>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "vulnerabilities_fixed_60_days", desc: %{
There MUST be no unpatched vulnerabilities of medium or high severity that
have been publicly known for more than 60 days. The vulnerability must be patched and
released by the project itself (patches may be developed elsewhere).
A vulnerability becomes publicly known (for this purpose) once it has a CVE with
publicly released non-paywalled information (reported, for example,
in the National Vulnerability Database) or when the project has been informed and the
information has been released to the public (possibly by the project). A vulnerability is medium
to high severity if its CVSS 2.0 base score is 4 or higher.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "vulnerabilities_critical_fixed", desc: %{
Projects SHOULD fix all critical vulnerabilities rapidly after they
are reported.
}}) %>
    <br>

    <span class='criteria-desc'><b>Note</b>: this means that users might be left vulnerable to all attackers
      worldwide for up to 60 days. This criterion is often much easier to meet than what Google
      recommends in Rebooting responsible disclosure, because Google recommends that the 60-day
      period start when the project is notified even if the report is not public.<br>
      <b>Rationale</b>: We intentionally chose to start measurement from the time of public knowledge,
      and not from the time reported to the project, because this is much easier to measure and
      verify by those outside the project.</span>

    <br><br><br>
    <h2 class="center h2">Security Analysis</h2>
    <h3><i>Static code analysis</i></h3>

     <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "static_analysis", desc: %{
At least one static code analysis tool MUST be applied to any proposed major production
release of the software before its release, if there is at least one OSS tool that
implement this criterion in the selected language. A static code analysis tool examines
the software code (as source code, intermediate code, or executable) without executing it
with specific inputs. For purposes of this criterion compiler warnings and "safe" language
modes do not count as a static code analysis tool (these typically avoid deep analysis because
speed is vital). Examples of such static code analysis tools include cppcheck, the clang static analyzer,
FindBugs (including FindSecurityBugs), PMD, Brakeman, Coverity Quality Analyzer,
and the HP Fortify Static Code Analyzer.
}}) %>
     <br>

     <span class='criteria-desc'><b>Note: </b>The analysis tool(s) MAY be focused on looking
                 for security vulnerabilities, but this is not required.</span>
     <hr>

     <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "static_analysis_common_vulnerabilities", desc: %{
It is SUGGESTED that the tool include rules or approaches to look for
common vulnerabilities in the analyzed language or environment.
}}) %>
     <hr>

     <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "static_analysis_fixed", desc: %{
All confirmed medium and high severity exploitable vulnerabilities discovered with static code analysis MUST be fixed.
A vulnerability is medium to high severity if its CVSS 2.0 is 4 or higher.
}}) %>
     <hr>

     <%= render(partial: "status_chooser", locals: {f: f,
             criteria: "static_analysis_often", desc: %{
It is SUGGESTED that static source code analysis occur on every commit or at least daily.
}}) %>

     <br><br>

     <h3><i>Dynamic analysis</i></h3>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "dynamic_analysis", desc: %{
At least one dynamic analysis tool MUST be applied to any proposed major production
release of the software before its release. A dynamic analysis tool examines the software
by executing it with specific inputs. For example, the project MAY use a fuzzing tool
(e.g., American Fuzzy Lop) or a web application scanner (e.g., OWASP ZAP or w3af).
For purposes of this criterion the dynamic analysis tool MUST vary the inputs in some way to
look for various kinds of problems or be an automated test suite with at
least 80% branch coverage.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "dynamic_analysis_unsafe", desc: %{
It is SUGGESTED that if the software is application-level software written
using a memory-unsafe language (such as C or C++) then at least one tool to
detect memory safety problems MUST be used during at least one dynamic tool use,
e.g., Address Sanitizer (ASAN) or valgrind. If the software is not application-level,
or is not in a memory-unsafe language, then this criterion is
automatically met.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "dynamic_analysis_enable_assertions", desc: %{
It is SUGGESTED that the software include many run-time assertions
that are checked during dynamic analysis.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f,
              criteria: "dynamic_analysis_fixed", desc: %{
The analysis tool(s) MAY be focused on looking for security vulnerabilities, but this is not required.<br>
All confirmed medium and high severity exploitable vulnerabilities discovered
with dynamic code analysis MUST be fixed. A vulnerability is medium to high
severity if its CVSS 2.0 base score is 4 or higher.
}}) %>

      <br>
      <span class="criteria-desc"><b>Rationale: </b>Static source code analysis and dynamic analysis tend
                  to find different kinds of defects (including defects that lead to vulnerabilities),
                  so combining them is more likely to be effective.</span>


      <br>
      <hr class='col-md-11'>
      <%= f.text_area :general_comments, class:"form-control",  hide_label: true, placeholder:'Additional Comments' %>
      <br>
      <%= f.submit 'Submit', class:"btn btn-primary" %>
    <% end %>













    <script>
      field_categories = {
        // "project_url" : "MUST",
        // "project_url_https" : "SUGGESTED",
        "description_sufficient" : "MUST",
        "interact" : "MUST",
        "contribution" : "MUST",
        "contribution_criteria" : "SHOULD",
        "license_location" : "MUST",
        "oss_license" : "MUST",
        "oss_license_osi" : "SUGGESTED",
        "documentation_basics" : "MUST",
        "documentation_interface" : "MUST",
        "repo_url" : "MUST",
        "repo_track" : "MUST",
        "repo_interim" : "MUST",
        "repo_distributed" : "SUGGESTED",
        "version_unique" : "MUST",
        "version_semver" : "SUGGESTED",
        "version_tags" : "SUGGESTED",
        "changelog" : "MUST",
        "changelog_vulns" : "MUST",
        "report_tracker" : "SUGGESTED",
        "report_process" : "MUST",
        "report_responses" : "MUST",
        "enhancement_responses" : "SHOULD",
        "report_archive" : "MUST",
        "vulnerability_report_process" : "MUST",
        "vulnerability_report_private" : "MUST",
        "vulnerability_report_response" : "MUST",
        "build" : "MUST",
        "build_common_tools" : "SUGGESTED",
        "build_oss_tools" : "SHOULD",
        "test" : "MUST",
        "test_invocation" : "SHOULD",
        "test_most" : "SUGGESTED",
        "test_policy" : "MUST",
        "tests_are_added" : "MUST",
        "tests_documented_added" : "SUGGESTED",
        "warnings" : "MUST",
        "warnings_fixed" : "MUST",
        "warnings_strict" : "SUGGESTED",
        "know_secure_design" : "MUST",
        "know_common_errors" : "MUST",
        "crypto_published" : "MUST",
        "crypto_call" : "MUST",
        "crypto_oss" : "MUST",
        "crypto_keylength" : "MUST",
        "crypto_working" : "MUST",
        "crypto_pfs" : "SHOULD",
        "crypto_password_storage" : "MUST",
        "crypto_random" : "MUST",
        "delivery_mitm" : "MUST",
        "delivery_unsigned" : "MUST",
        "vulnerabilities_fixed_60_days" : "MUST",
        "vulnerabilities_critical_fixed" : "SHOULD",
        "static_analysis" : "MUST",
        "static_analysis_common_vulnerabilities" : "SUGGESTED",
        "static_analysis_fixed" : "MUST",
        "static_analysis_often" : "SUGGESTED",
        "dynamic_analysis_unsafe" : "MUST",
        "dynamic_analysis_enable_assertions" : "SUGGESTED",
        "dynamic_analysis_fixed" : "MUST"
      }

      function is_enough(criteria) {
        var criteria_status = "#project_" + criteria + "_status";
        if (field_categories[criteria] === "MUST") {
            return ($(criteria_status + "_met").is(':checked'));
        } else {
            return ($(criteria_status + "_met").is(':checked') ||
                    ( $(criteria_status + "_unmet").is(':checked') &&
                      document.getElementById("project_"+criteria+"_justification").value.length > 0));
        }
      }

      function update_criteria_display(criteria) {
          var criteria_just = "#project_" + criteria + "_justification";
          var criteria_status = "#project_" + criteria + "_status";
          var justification_value = document.getElementById("project_"+criteria+"_justification").value;
          if ( $(criteria_status + "_met").is(':checked'))
               $(criteria_just).show('fast');
          if ( $(criteria_status+"_unmet").is(':checked'))
               $(criteria_just).show('fast');
          if ( $(criteria_status+"_").is(':checked') && justification_value.length == 0)
               $(criteria_just).hide('fast');
          if (is_enough(criteria)) {
              $("#" + criteria + "_enough").
                  attr("src", "/assets/Thumbs_up_font_awesome.svg").
                  attr("alt", "Enough for a badge!");
          } else {
              $("#" + criteria + "_enough").
                  attr("src", "/assets/Thumbs_down_font_awesome.svg").
                  attr("alt", "Not enough for a badge.");
          }
      }

      function setup_field(criteria) {
        update_criteria_display(criteria);
        $('input[name="project['+criteria+'_status]"]').click(
            function() {update_criteria_display(criteria);});
        $('input[name="project['+criteria+'_justification]"]').blur(
            function() {update_criteria_display(criteria);});
      }

      // Setup display as soon as page is ready
      $(document).ready(function() {
          $.each(field_categories, function(key, value) {
              setup_field(key);
          })
      });
    </script>

  </div>
</div>
