#!/bin/bash

# We use 'bash', not sh, to ensure that we have the 'type' command.

echo 'install-badge-dev-env: Install development environment for BadgeApp.'

system_install_prefix='sudo'

set -e -u # Error detector

# set -x # Show progress

# Given a list of commands, return the first one that exists (if any)
find_command () {
  for f ; do
    if type "$f" >/dev/null 2>&1 ; then
      echo "$f"
      true
      return
    fi
  done
  # None found, return something useful.
  echo UNKNOWN
  false
}

# This is the running list of system packages to install.
PACKAGES=''

# Add list of packages to the PACKAGES list. Rename as needed.
add_pkg () {
  for p ; do
    if [ "$p" = '' ] ; then continue ; fi
    if [ "$p" = '-' ] ; then continue ; fi
    PACKAGES="$PACKAGES $p"
  done
}


# Main line.

if ! [ -f 'install-badge-dev-env' ] ; then
  echo 'Must run at top level.' >&2
  exit 1
fi

# First, figure out what package manager to use.
echo
echo 'STAGE 1: Determine the package manager to use.'

if [ "$(uname)" = "Darwin" ] ; then
  manager='brew'
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ] ; then
  echo 'MINGW, will not work' >&2
  exit 1
# elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
else
  # apt-get : Debian, Ubuntu
  # yum : Red Hat Enterprise Linux, CentOS, some Fedora
  # dnf : some Fedora
  # emerge : Gentoo
  manager=$(find_command apt-get dnf yum emerge pkg)
fi

if [ "$manager" = 'UNKNOWN' ] ; then
  echo 'Could not find a system package manager.'
  exit 1
fi

installer="$manager install"

echo "Will use the installer command '$installer'"

# Now start adding packages. 
echo
echo 'STAGE 2: Identifying the packages to install.'

# Install Ruby - Rails and our application are written in it.
# We'll actually install a specific version later, but this will help us
# bootstrap the installation and building of that version.
add_pkg ruby

# SQLite3 database system, used in development for data storage
add_pkg sqlite3

# C compiler for rebuilding a specific version of ruby.
add_pkg gcc automake autoconf

echo 'About to install system packages with the command:'
echo "  $system_install_prefix $installer $PACKAGES"
$system_install_prefix $installer $PACKAGES


# Install rbenv, to let us select a specific version of ruby.
echo
echo 'STAGE 3: Install rbenv'

if type rvm > /dev/null 2>&1 ; then
  echo 'WARNING: rvm installed, may be incompatible with rbenv.' >&2
fi

if type rbenv > /dev/null 2>&1 ; then
  echo 'rbenv already installed.'
else
  git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

  # ensure rbenv is on the PATH when running the rest of this script.
  export PATH="$HOME/.rbenv/bin:$PATH"

  # Make rbenv a permanent fixture.
  rbenv_set=0
  for f in .bashrc .bash_profile .profile
  do
    if [ -f "$HOME/$f" ] ; then
      if ! grep '\.rbenv/bin' > /dev/null ; then
        echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> "$HOME/$f"
      fi
      rbenv_set=1
    fi
  done
  if [ $rbenv_set = 0 ] ; then
    echo 'Warning: Did not modify the PATH in a shell rc or profile.' >&2
  fi
fi

# This makes "bundle ..." use rbenv's version of Ruby:
if ! [ -e "$HOME/.rbenv/plugins/bundler" ] ; then
  git clone git://github.com/carsomyr/rbenv-bundler.git \
            "$HOME/.rbenv/plugins/bundler"
fi

# Force install Ruby 2.2.2 using rbenv.  This may cause a compile.
echo
echo 'STAGE 4: For this project, force install fixed version of ruby'

rbenv install --skip-existing 2.2.2
rbenv local 2.2.2 # In this directory AND BELOW, use Ruby 2.2.2 instead.

echo
echo 'STAGE 5: Install gems (including bundler and Rails)'

gem sources --add https://rubygems.org  # Ensure you're getting gems here
gem install bundler  # Install the "bundler" gem package manager.
rbenv rehash
bundle install       # Install gems we use in Gemfile.lock, including Rails

echo
echo 'STAGE 6: Set up database for development if necessary'

# Is the database already set up?
rails console > .rconsole <<END_OF_COMMANDS
def database_exists?
  db="database"
  ActiveRecord::Base.connection
rescue ActiveRecord::NoDatabaseError
  puts "#{db} not present"
else
  puts "#{db} present"
end
database_exists?
END_OF_COMMANDS

if grep 'database not present' .rconsole > /dev/null ; then
  echo 'Running "rake db:setup" - the database is not present'
  rake db:setup        # Setup database and seed it with dummy data
else
  echo 'Skipping "rake db:setup" - the database appears to be present'
fi

echo
echo 'FINAL STAGE: Test to see if it is working'
rake
