# WARNING. THIS FILE WAS AUTO-GENERATED BY THE TRANSLATION GEM.
# IF YOU UPDATE IT, YOUR CHANGES WILL BE LOST AT THE NEXT SYNC.
#
# To update this file, use this translation interface:
# http://translation.io/david-a-wheeler/cii-best-practices-badge/zh-CN
#
---
zh-CN:
  helpers:
    select:
      prompt: 请选择
    submit:
      create: 新增%{model}
      update: 更新 %{model}
      submit: 保存 %{model}
  ransack:
    search: 搜索
    predicate: 基于
    and: 并且
    or: 或者
    any: 任意
    all: 所有
    combinator: 条件组合
    attribute: 属性
    value: 数值
    condition: 条件
    sort: 排序
    asc: 升序
    desc: 降序
    predicates:
      eq: 等于
      eq_any: 等于任意值
      eq_all: 等于所有值
      not_eq: 不等于
      not_eq_any: 不等于任意值
      not_eq_all: 不等于所有值
      matches: 符合
      matches_any: 符合任意条件
      matches_all: 符合所有条件
      does_not_match: 不符合
      does_not_match_any: 符合任意条件
      does_not_match_all: 不符合所有条件
      lt: 小于
      lt_any: 小于任意一个值
      lt_all: 小于所有值
      lteq: 小于等于
      lteq_any: 小于等于任意一个值
      lteq_all: 小于等于所有值
      gt: 大于
      gt_any: 大于任意一个值
      gt_all: 大于所有值
      gteq: 大于等于
      gteq_any: 大于等于任意一个值
      gteq_all: 大于等于所有值
      in: 被包含
      in_any: 被任意值包含
      in_all: 被所有值包含
      not_in: 不被包含
      not_in_any: 不被任意值包含
      not_in_all: 不被所有值包含
      cont: 包含
      cont_any: 包含任意一个值
      cont_all: 包含所有值
      not_cont: 不包含
      not_cont_any: 不包含任意一个值
      not_cont_all: 不包含所有值
      start: 以该值开始
      start_any: 以任意一个值开始
      start_all: 以所有值开始
      not_start: 不以该值开始
      not_start_any: 不以任意一个值开始
      not_start_all: 不以所有值开始
      end: 以该值结尾
      end_any: 以任意一个值结尾
      end_all: 以所有值结尾
      not_end: 不以该值结尾
      not_end_any: 不以任意一个值结尾
      not_end_all: 不以所有值结尾
      'true': 等于true
      'false': 等于false
      present: 有值
      blank: 为空
      'null': 为空
      not_null: 非空
  simple_form:
    'yes': 是
    'no': 否
    required:
      text: 必须
      mark: "*"
    error_notification:
      default_message: 请查看以下问题：
  hello: 你好，世界
  projects_count:
    one: "%{count} 项目"
    other: "%{count} 项目"
  feed_title: CII最佳实践徽章计划更新项目
  layouts:
    cii_best_practices: CII最佳实践
    projects: 项目
    users: 用户
    profile: 资料
    settings: 设置
    logout_html: "<span class =“glyphicon glyphicon-log-out”></span> 注销"
    signup_html: <span class="glyphicon glyphicon-user"></span> 注册
    login_html: <span class="glyphicon glyphicon-log-in"></span> 登录
    footer_text_html: <small> <strong>需要帮助？有疑问？发现问题？请 <em><a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">发送邮件</a>
      </em>或 <em><a href="https://github.com/linuxfoundation/cii-best-practices-badge/issues"
      target="_blank">提出问题</a></em>.</strong> © 2015-2017 <a href="https://www.coreinfrastructure.org/
      target="_blank">Core Infrastructure Initiative （核心基础设施计划）</a>, 一个 <a href="https://www.linuxfoundation.org/"
      target="_blank">Linux 基金会</a> 合作项目。版权所有。 请查阅我们的 <a href="https://www.linuxfoundation.org/privacy"
      target="_blank">隐私策略</a> 和 <a href="https://www.linuxfoundation.org/terms" target="_blank">使用条款</a>.
      </small>
    account: 帐户
  sessions:
    login_header: 登录
    login_with_github_html: <span class="fa fa-github"></span> 使用GitHub账户登录
    or: 或
    email: 电子邮件
    password: 密码
    forgot_password: 忘记密码了吗？
    remember_me: 记住我
    login_custom: 使用自定义帐户登录
    no_custom: 没有自定义帐号？立即注册！
    already_logged_in: 您已经登录。
    incorrect_login_info: 登录信息不正确
    invalid_combo: 电子邮件或者密码不正确
    signed_in: 已登录！
    not_activated: '帐户未激活。检查您的电子邮件中的激活链接。

'
    signed_out: 已退出！
  users:
    new:
      signup_header: 注册
      intro_html: <a href="/login">如果您有GitHub账户，可以使用该账户登录</a>. 如果您不想使用GitHub账户，您可以在此注册。<br><br>
        如果您没有收到激活链接，请重新注册，我们将发送新的激活链接。
      name: 名称
      email: 电子邮件
      password: 密码
      password_confirmation: 确认密码
      create_account: 创建我的账户
      preferred_locale: 首选语言
    show:
      see_external: '查看此用户的外部页面。

'
      other_projects_edit: 其他您可以编辑的项目
      as_admin: 作为管理员，您还可以：
      send_email_to: 发送电子邮件至：
      delete_link_name: 删除
      confirm_delete: 您确定要删除此用户吗？
      edit_user: 编辑用户
    update:
      profile_updated: 资料已更新
    destroy:
      cannot_delete_self: 不能删除自己。
      user_deleted: 用户已被删除。
    redirect_existing: '该用户已经存在。您的意思是登录吗？

'
    new_activation_link_created: '新的激活链接已经创建。请检查您的电子邮件以激活您的帐户。

'
    please_log_in: 请登录。
    edit:
      update_user_info: 更新用户信息
      save_changes: 保存更改
  project_stats:
    index:
      project_stats_header: 项目统计
      all_projects: 所有项目
      projects_nontrivial: 具有显著进展的项目
      projects_activity_30: 在过去30天内有徽章项活动的项目
      daily_activity: 每日徽章项活动
      reminders: 提醒
      admin_html: '作为管理员，您还可以查看<a href="/reminders">有关提醒的详细信息</a>。

'
      raw_data: '您还可以查看原始数据：

'
      json_format: JSON格式
      csv_format: 可下载的CSV格式
      active_projects: 活跃项目（30天内创建/更新）
      active_in_progress: 正在进行中的项目（在30天内创建/更新）
      active_edited: 活跃编辑的项目（30天内有更新）
      active_edited_in_progress: 活跃编辑的认证中项目（30天内有更新）
      projects_created_since_yesterday: '自前一天创建的项目

'
      projects_updated_since_yesterday: 项目从前一天更新
      reminders_sent_since_yesterday: '自昨天起发送的提醒

'
      reactivated_projects: '收到提醒后14天内重新启动的项目

'
      projects_created_average_7_days: '项目创建平均超过7天

'
      projects_updated_average_7_days: '项目更新平均超过7天

'
  projects:
    index:
      add_link: 添加
      add_new: 添加新项目
      badge_status: 徽章状态
      exclude_passing: 排除已通过的
      text_search: 文本搜索
      name_or_description: 名称或说明文字
      search: 搜索
      all: 所有
      passing_100: 通过（100％）
      in_progress_variable: 正在进行中（%{percent}％以上）
    table:
      id: Id
      name: 名称
      description: 描述
      website: 网站
      license: 授权
      owner: 所有者
      last_achieved: 最后达成
      pachieved: "% 已达成"
      can_also_sort: 您也可以按以下方式排序：
      repository_url: 仓库网址
      create_time: 创建时间（徽章认证的）
      update_time: 最后更新时间（徽章条目）
      user_id: 用户名
      paren_name_unknown:
      badge_level:
    new:
      post_delay_warning: 在提交后，因为我们试图自动填充相关信息，可能有显著的滞后。
      new_badge: 新徽章
      may_select_html: '您可以从GitHub仓库中选择<i>或</i>提供其他有关项目的信息。

'
      select_one_github: 从GitHub仓库中选择
      submit_github: 提交GitHub仓库
      url_of_homepage: 项目主页的URL （项目整体的）？以 http(s):// 开头 （很多字符不允许，包含 "?"）
      placeholder_of_homepage: http(s)://... 项目主页 URL
      url_of_repo: 版本控制仓库的URL （可以和项目主页相同）？ 以 http(s):// 开头（很多字符不允许，包含 "?"）
      placeholder_of_repo: http(s)://... 项目仓库 URL
      submit_urls: 提交网址
      sign_in_first: 请登录以添加项目！
      thanks_adding:
      project_already_exists: 这个项目已经存在！
      final_text_html:
    show:
      edit: 编辑
      delete: 删除
      confirm_delete: '您确定要删除整个项目： %{project_id} 吗？

'
      back: 后退
      cc_by_3plus_html:
      cc_by_3only_html:
      owned_by:
      created_at_html:
      updated_at_html: "<strong>最后更新于</strong> %{when}。"
      last_lost_html:
      last_achieved_html:
    edit:
      submit_cc_by_3plus_html:
      save_and_continue: 保存（并继续）
      submit_and_exit: 提交（并退出）
      repo_url_limits: '您只能将repo_url从http更改为https

'
      changed_since_html: '您访问编辑表单后，另一位用户对该记录进行了更改。 <br>请打开一个新的<a href="%{edit_url}"
        target = _blank>编辑表单</a>来转移您的更改。

'
      successfully_updated: 项目成功更新。
      congrats_new:
      lost_badge: 项目已经失去了徽章。
      static_analysis_updated_html:
    form_basics:
      project_name:
        description: 项目的人类可读的名称是什么？
        details:
        placeholder: FLOSS项目名称
      description:
        description: 什么是项目的简要描述？
        details:
        placeholder: 项目介绍
      homepage_url:
        description: 项目的URL（作为一个整体）是什么？
        placeholder: 项目网站网址
      repo_url:
        description:
        placeholder: 项目仓库URL
      implementation_languages:
        description: '用什么编程语言实现项目？

'
        details: '如果有多种语言，请将它们列为逗号分隔值（可选空格），并将它们从最多到最少使用。如果有长列表，请至少列出前三个最常见的列表。如果没有语言（例如，这是仅文档或仅测试项目），请使用单个字符“
          - ”。请使用每种语言的常规大小写，例如“JavaScript”。

'
        placeholder:
      cpe:
        description_html:
        details_html:
        placeholder: "（可选）CPE名称"
      license:
        description_html: '项目使用什么许可证发布？

'
        details_html:
        placeholder: FLOSS许可证
    form_early:
      badge_intro:
        description:
        details_html: '没有一套可以保证软件永远不会有缺陷或漏洞的做法；如果规范或假设是错误的，即使合适的方法也可能失败。也没有哪些做法可以保证一个项目能够维持健康和运作良好的开发者社区。但是，遵循最佳做法可以帮助改善项目的成果。例如，一些做法可以在发布之前进行多人评估，这可以帮助您找到其他难以找到的技术漏洞，并帮助建立信任，并希望不同公司的开发人员之间进行重复的交互。要获得徽章，必须满足所有“必须”和“禁止”的条款，满足所有“应该”条款或有合适的理由，<i>和</
          i>所有“建议”条款必须满足或未满足（至少希望考虑）。欢迎通过<a href="https://github.com/linuxfoundation/cii-best-practices-badge">
          GitHub网站创建问题或提出请求</a>进行反馈。另外还有一个<a href =“https ：//lists.coreinfrastructure.org/mailman/listinfo/cii-badges“>一般讨论邮件列表</a>。<br
          /> <br />

'
      got_badge:
        description_1:
        description_2: 这里是如何嵌入它：
        details_html:
        editing_description_html:
        badge_alt:
      level:
        0_html: 这些是通过级别的条款。
        1_html: 这些是白银级别的条款。
        2_html: 这些是黄金级别的条款。
    misc:
      disabled_reminders:
      general_comments:
        description: '关于该项目的其他一般性意见：

'
        placeholder: 附加评论（MarkDown格式）
      some_not_crypto_html: '请注意，某些软件不需要使用加密机制。

'
      dont_use_crypto: '如果项目生成的软件不使用加密机制，请按这里

'
      future_header_html:
      in_javascript:
        collapse_all_title: 折叠所有面板
        collapse_all: 折叠面板
        expand_all_title: 展开所有面板
        expand_all: 展开面板
        show_details: 显示详细资料
        hide_details: 隐藏细节
        show_all_details: 显示所有细节
        hide_all_details: 隐藏所有细节
        show_met_title: 显示满足和N/A的条款
        show_met_html: 显示满足＆amp; N/A
        hide_met_title: 隐藏满足和N/A条款（留下不满足和未知）
        hide_met_html: 隐藏满足 &amp; N/A
        passing_alt: 足够获得徽章！
        barely_alt: 勉强够获得徽章。
        failing_alt: 不足以获得徽章。
        unknown_alt: 未知的所需信息，不足以用于徽章。
        met_url_placeholder: "（需要URL）请说明如何满足，包括1+ 关键URL。\n"
        met_justification_placeholder: "（必填）请说明如何满足这一点，可能包括1+ 关键URL。\n"
        met_placeholder: "（可选）请解释如何满足这一点，可能包括1+ 关键URL。\n"
        unmet_placeholder:
        na_justification_placeholder: "（必填）请说明为什么不适用（N/A），可能包括1+关键网址。\n"
        na_placeholder: "（可选）请说明为什么不适用（N/A），可能包括1+关键网址。\n"
        unknown_placeholder: 请解释
      toggle_details_title: 切换细节文字
      details: 详细信息
      url_required: 需要网址
      future_criterion: 未来条款
      url_required_warning: '警告：需要URL，但找不到URL。

'
      justification_required_warning: '警告：需要更长的理由。

'
    delete:
      done: 项目已成功删除。
  user_mailer:
    account_activation:
      before_html: |
        <h1>CII 最佳实践徽章计划</h1>
        <p>您好！</p>
        <p>
        欢迎来到徽章计划！
        点击下面的链接激活帐户：
        </p>
      before_text: |
        您好！

        欢迎来到CII 最佳实践徽章计划！

        点击下面的链接激活帐户：
      activate: 启用
      subject: 帐号激活
    github_welcome:
      before_html: |-
        <p>您好，</p>

        <p>
        感谢连接到您的GitHub账户，欢迎来到
        CII最佳实践徽章计划！
        </p>

        <p>
        如果该操作不是由您本人做出，请检查您的 GitHub
        安全日志：Settings&gt;Security.
        </p>
      before_text: |-
        您好，

        感谢连接到您的GitHub账户，欢迎来到
        CII最佳实践徽章计划！

        如果该操作不是由您本人做出，请检查您的 GitHub
        安全日志：Settings>Security。
      subject: 欢迎来到徽章计划
    password_reset:
      before_html: |-
        <h1>重设密码</h1>

        <p>要重设密码，请点击下面的链接：</p>
      before_text: '要重设密码，请点击下面的链接：

'
      after_html: |
        <p>此链接将在两个小时后过期。</ p>

        <P>
        如果您没有要求重置密码，
        请忽略此电子邮件，
        您的密码将保持原样。
        </ p>
      after_text: |
        此链接将在两个小时后过期。

        如果您没有要求重置密码，
        请忽略此电子邮件，
        您的密码将保持原样。
      reset_password: 重设密码
      subject: 重设密码
    user_update:
      before_text: 您帐户的某些用户数据已更新。
      username_changed: 用户名已更改。
      email_changed: 电子邮件地址已更改。
      password_changed: 密码已更改。
      locale_changed: 区域设置已更改。
      current_state: 对于当前状态，请参阅：
      after_text: 如果有问题，请提醒我们。
      subject: 用户数据已编辑
  submit: 提交
  account_activations:
    activated: 帐户已激活！
    failed_activation: 激活链接无效
  password_resets:
    forgot_password: 忘记密码
    reset_password: 重设密码
    password_confirmation: 确认
    email_not_found: 电子邮件地址未找到
    password_empty: 密码不能为空
    password_reset: 密码已重置
    instructions_sent: 电子邮件发送密码重置说明
    cant_reset_nonlocal: 对不起，无法重设非本地用户的密码
    reset_expired: 密码重设已过期。
    update_password: 更新密码
  report_mailer:
    new_project_heading: '感谢您将项目添加到最佳实践徽章计划中

'
    new_project_part1: 感谢您将项目添加到最佳实践徽章计划中。项目的当前名称为：
    new_project_part2: 请访问您的徽章项，完成相关信息，以获取徽章！您的徽章项的网址为：
    new_project_part3_html: |-
      <p>
      我们鼓励持续性的进展。
      </p>

      <p>
      如果您想 <em>仅</em> 查看遗漏的信息，
      访问您的徽章项页面，
      点击接近上方的按钮：“隐藏已满足或不涉及的条款”。
      有问题，或者需要帮助，请联系：
      <a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;</a>
      或者提交问题：
      <a href="https://github.com/linuxfoundation/cii-best-practices-badge/issues">https://github.com/linuxfoundation/cii-best-practices-badge/issues</a>
      （点击“new issue”）。
      </p>

      <p>
      感谢您的时间投入。
      </p>
    new_project_part3_text: |
      我们鼓励持续性的进展。

      如果您想仅查看遗漏的信息，
      访问您的徽章项页面，
      点击接近上方的按钮：“隐藏已满足或不涉及的条款”。
      有问题，或者需要帮助，请联系：
      cii-badges-questions-owner@lists.coreinfrastructure.org
      或者提交问题：
      https://github.com/linuxfoundation/cii-best-practices-badge/issues
      （点击“new issue”）。

      感谢您的时间投入。
    in_markdown_add: 在markdown标记文本中，您可以添加：
    in_html_add: 在HTML中，您可以添加：
    ending: "--- David A. Wheeler，CII最佳实践徽章技术负责人\n"
    subject_achieved_passing: '恭喜获得新的%{new_level}最佳实践徽章！

'
    subject_no_longer_passing: '您的最佳实践徽章不再是%{old_level}

'
    subject_new_project: '您已将项目添加到CII最佳实践徽章计划

'
    subject_reminder: '您的项目还没有“最佳实践”徽章

'
    subject_project_deleted: '名为%{project_name}的项目%{project_id}已被删除

'
    gained_level_part1: |
      恭喜！

      根据您提供的信息，
      您的项目获得了CII最佳实践“%{new_level}”徽章。
      有关详细信息，请参阅此URL：
    gained_level_part2: |
      请将您的徽章添加到您的项目和/或代码仓库网站；
      这是您应得的：
    gained_level_part3:
    lost_level_message: |
      很抱歉，您的项目不再具有“%{old_level}”徽章
      现在是“%{new_level}”。
      有关详细信息，请参阅以下URL：
  project_name_unknown: "(未知名称)"
  locale_name:
    en:
    fr:
    zh-CN:
    de:
    ja:
  criteria:
    '0':
      description_good:
        description: '项目网站必须简明扼要地描述软件的作用（它解决了什么问题？）。

'
        details: '必须采用潜在用户可以理解的语言（例如，它使用最少的术语/行话）。

'
        met_placeholder: "（可选）简洁描述在哪里？考虑提供一个URL。\n"
      interact:
        description: '项目网站必须提供有关如何获取和提供反馈（错误报告或增强功能）以及如何贡献的信息。

'
        met_placeholder: "（可选）此信息在哪里？考虑提供URL。\n"
      contribution:
        description: '关于如何贡献的信息必须解释贡献流程（例如，是否使用拉请求？）

'
        details: 除非另有说明，否则我们假定<a href="https://guides.github.com/activities/contributing-to-open-source/">
          GitHub上的项目使用 Issues 和 Pull 请求</a>。这些信息可以简短，例如，说明项目使用 Pull （拉）请求，问题跟踪器或邮寄到邮件列表中的哪一个。
        met_placeholder: "（需要URL）流程是什么？在哪个URL有说明？\n"
      contribution_requirements:
        description: '关于如何贡献的信息应包括对可接受的贡献的要求（例如，引用任何所需的编码标准）。

'
        unmet_placeholder: '为什么需求很明显，不需要这些信息？

'
      floss_license:
        description: '项目生产的软件必须作为FLOSS发布。

'
        details: 'FLOSS是以符合<a href="https://opensource.org/osd-annotated">开源定义</a>或<a
          href ="http://www.gnu.org/philosophy/free-sw.en.html">免费软件定义</a>。此类许可证的示例包括<a
          href="http://creativecommons.org/publicdomain/zero/1.0/"> CC0 </a>，<a href
          ="https://opensource.org/licenses/MIT"> MIT </a>，<a href="https://opensource.org/licenses/BSD-2-Clause">
          BSD 2条款</a>，<a href ="https://opensource.org/licenses/BSD-3-Clause"> BSD
          3条款修订版</a>，<a href="https://opensource.org/licenses/Apache-2.0"> Apache
          2.0 </a>，<a href ="https://opensource.org/licenses/lgpl-license"> Lesser
          GNU通用公共许可证（LGPL）</a>，以及<a href ="https://opensource.org/licenses/gpl-license">
          GNU通用公共许可证（GPL）</a>。为了我们的目的，这意味着许可证必须是：<ul> <li> <a href="https://opensource.org/licenses">开放源码促进会（OSI）批准的许可证</a>，或</
          li> <li> <a href="https://www.gnu.org/licenses/license-list.html">自由软件基金会（FSF）批准的免费许可证</a>，或</
          li> <li> <a href="https://www.debian.org/legal/licenses/"> Debian 主流可接受的免费许可</a>，或</
          li> <li><a href="https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing">a
          "good" license according to Fedora</a>。</li> </ul>该软件也可以用其他许可证（例如，“GPLv2或专有”是可以接受的）。

'
      floss_license_osi:
        description: '建议由项目生成的软件的任何必需的许可证是<a href="https://opensource.org/licenses">由开放源码促进会（OSI）批准的。</a>

'
        details: 'OSI （开放源代码促进会）使用严格的审批流程来确定哪些许可证是开源软件（OSS）。

'
      license_location:
        description: '项目必须将其许可证在其源代码存储库中的标准位置发布。

'
        details: '例如，作为名为LICENSE或COPYING的顶级文件。许可证文件名之后可以是扩展名，例如“.txt”或“.md”。

'
      documentation_basics:
        description: '项目必须为项目生成的软件提供基本文档。

'
        details: '该文档必须在某些媒体（例如文本或视频）中，包括：如何安装它，如何启动它，如何使用它（可能使用教程使用示例）以及如何安全地使用它（例如，做什么和不做什么），如果这是软件的一个适当的话题。安全文档不需要太长篇幅。项目可以使用非项目内容的超文本链接作为文档。如果项目不生产软件，请选择“不适用”（N
          / A）。

'
        met_placeholder: "（可选）哪些URL是文档的入口点？\n"
      documentation_interface:
        description: '项目必须提供描述项目生成的软件的外部接口（输入和输出）的参考文档。

'
        details: '外部接口的文档向最终用户或开发人员解释如何使用它。这将包括其应用程序接口（API），如果软件有。如果它是一个库，记录可以调用的主要类/类型和方法/函数。如果是Web应用程序，定义其URL接口（通常是其REST接口）。如果是命令行界面，请记录其支持的参数和选项。在许多情况下，最好是自动生成大部分文档，以便本文档随着软件的更改而保持同步，但这并不是必需的。项目可以使用非项目材料的超文本链接作为文档。文档可以自动生成（实际上这通常是最好的方法）。可以使用Swagger
          / OpenAPI生成REST接口的文档。代码界面文档可以使用<a href="http://usejsdoc.org/"> JSDoc </a>（JavaScript），<a
          href="https://esdoc.org/"> ESDoc </a>（JavaScript），pydoc（Python）和Doxygen（很多）。仅在实现代码中添加注释不足以满足这一标准；在没有阅读所有源代码的情况下，需要一个简单的方法来查看信息。如果项目不生产软件，请选择“不适用”（N
          / A）。

'
      sites_https:
        description: '项目网站（网站，存储库和下载URL）必须使用TLS支持HTTPS。

'
        details: '您可以从<a href="https://letsencrypt.org/">Let''s Encrypt</a>获取免费证书。项目可以使用（例如）<a
          href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">
          GitHub页面</a>实现此条款， <a href="https://about.gitlab.com/2016/12/24/were-bringing-gitlab-pages-to-community-edition/">
          GitLab页面</a>，或<a href =" https://sourceforge.net/blog/introducing-https-for-project-websites/">
          SourceForge项目页面</a>。如果您使用具有自定义域的GitHub页面，则可以使用内容传送网络（CDN）作为代理来支持HTTPS，例如<a
          href ="https://blog.cloudflare.com/secure-and -fast-github-pages-with-cloudflare/">博客文章“使用CloudFlare安全快速的GitHub页面”</a>，以满足此标准。如果您支持HTTP，我们敦促您将HTTP流量重定向到HTTPS。

'
      discussion:
        description: '该项目必须有一个或多个讨论机制（包括建议的更改和问题），可搜索，允许通过URL访问消息和主题，使新人能够参与一些讨论，并且不需要客户端安装专有软件。

'
        details: '可接受机制的示例包括归档邮件列表，GitHub问题和拉请求讨论，Bugzilla，Mantis和Trac。如果满足这些标准，异步讨论机制（如IRC）是可以接受的；确保有一个URL可访问归档机制。允许专有JavaScript，但不鼓励。

'
      english:
        description: '项目应该提供英文文档，并能够接受英文的代码的错误报告和评论。

'
        details: '英语是计算机技术的<a href="https://en.wikipedia.org/wiki/Lingua_franca">通用语言</a>；支持英语增加了全球不同潜在开发者和检视者的数量。即使核心开发人员的主要语言不是英文，项目也可以达到这个标准。

'
      repo_public:
        description:
        details:
      repo_track:
        description:
      repo_interim:
        description: '为了实现协作检视，项目的源代码存储库必须包括临时版本，以便检视版本之间的变化；它不得仅包括最终版本。

'
        details:
      repo_distributed:
        description: '建议使用通用分布式版本控制软件（例如，git）作为项目的源代码存储库。

'
        details: 'Git不是必须，项目在合适场景可以使用集中版本控制软件（如subversion）。

'
      version_unique:
        description:
        details:
      version_semver:
        description:
        details:
      version_tags:
        description:
      release_notes:
        description: '该项目必须在每个版本中提供发布说明，这是该版本中主要变化的可读的摘要，以帮助用户确定是否应升级，升级影响将如何。发行说明不能是版本控制日志的原始输出（例如，“git
          log”命令结果不是发行说明）。其产出不适用于多个地点的项目（如单个网站或服务的软件），并采用持续交付，可以选择“N / A”。

'
        details:
      release_notes_vulns:
        description: '发行说明必须列出每个新版本中修复的每个公开的漏洞。如果没有发行说明或者没有公开的漏洞，选择“不适用”。

'
      report_process:
        description: '项目必须为用户提交错误报告（例如，使用问题跟踪器或邮件列表）提供相关流程。

'
      report_tracker:
        description: '项目必须使用问题跟踪器来跟踪每个问题。

'
        unmet_placeholder: 为什么没有问题跟踪器？
      report_responses:
        description: '该项目必须响应过去2-12个月内（含）提交的大多数错误报告；响应不需要包括修复。

'
      enhancement_responses:
        description: '该项目应该对过去2-12个月内（包括）的大部分（> 50％）的增强请求作出回应。

'
        details: '答复可能是“不”或有关其价值的讨论。目的只是对某些请求有一些回应，这表明项目还活着。为了该条款的目的，项目不需要计数无效请求（例如，来自垃圾邮件发送者或自动系统）。如果项目不再进行增强，请选择“未满足”，并将介绍此情况的URL包含在内。如果一个项目有超出处理能力的增强需求数量，请选择“未满足”并解释。

'
      report_archive:
        description:
      vulnerability_report_process:
        description:
        details:
      vulnerability_report_private:
        description:
        details:
      vulnerability_report_response:
        description:
        details:
      build:
        description: '如果项目生成的软件需要构建使用，项目必须提供可以从源代码自动重新构建软件的可工作的构建系统。

'
        details: '构建系统确定重建软件（以及以什么顺序）需要执行哪些操作，然后执行这些步骤。例如，它可以调用编译器来编译源代码。如果从源代码创建可执行文件，则必须可以修改项目的源代码，然后通过这些修改生成更新的可执行文件。如果项目生成的软件取决于外部库，则构建系统<i>不必</i>构建那些外部库。如果在修改源代码之后不需要构建任何使用该软件的软件，请选择“不适用”（N/A）。

'
      build_common_tools:
        description: '建议使用通用工具来构建软件。

'
        details: '例如，Maven，Ant，cmake，autotools，make或rake。

'
      build_floss_tools:
        description: 该项目应该仅使用FLOSS工具来构建。
      test:
        description:
        details:
      test_invocation:
        description:
        details: '例如“make check”，“mvn test”或“rake test”。

'
      test_most:
        description:
      test_continuous_integration:
        description:
      test_policy:
        description:
        details:
      tests_are_added:
        description:
        details:
      tests_documented_added:
        description:
        details:
      warnings:
        description:
        details:
      warnings_fixed:
        description: '该项目必须处理警告。

'
        details:
      warnings_strict:
        description:
        details:
      know_secure_design:
        description: '该项目必须至少有一个主要开发人员知道如何设计安全软件。

'
        details:
      know_common_errors:
        description:
        details:
      crypto_published:
        description: '项目生成的软件默认情况下，只能使用由专家公开发布和审查的加密协议和算法（如果使用加密协议和算法）。

'
        details: '这些加密条款并不总是适用，因为某些软件不需要直接使用加密功能。

'
      crypto_call:
        description: '如果项目生成的软件是应用程序或库，其主要目的不是实现加密，那么它应该只调用专门设计实现加密功能的软件，而不应该重新实现自己的。

'
      crypto_floss:
        description: '项目所产生的软件中，所有依赖于密码学的功能必须使用FLOSS实现。

'
        details: '请参阅<a href="https://opensource.org/osr">OSI （开放源代码促进会）发布的软件开放标准需求</a>。

'
      crypto_keylength:
        description: '项目生成的软件中的安全机制使用的默认密钥长度必须至少达到2030年（如2012年所述）的NIST最低要求。必须提供配置，以使较小的密钥长度被完全禁用。

'
        details: '这些最小位长度是：对称密钥112，因式分解模数2048，离散对数密钥224，离散对数组2048，椭圆曲线224和散列224（密码散列不涉及该位长度），关于密码散列的更多信息可以在<a
          href="#crypto_password_storage"> crypto_password_storage </a> 条款）。请参阅<a
          href="http://www.keylength.com"> http://www.keylength.com </a>以比较不同组织的密钥长度建议。在某些配置中，软件可能允许较小的密钥长度（理想情况下，它不会，因为这允许降级攻击，但是互操作性有时需要较短的密钥长度）。

'
      crypto_working:
        description: '项目产生的软件中的默认安全机制不得取决于已被破解的密码算法（例如，MD4，MD5，单DES，RC4，Dual_EC_DRBG）或使用不适合上下文的密码模式（例如，ECB模式几乎不适当，因为它揭示了密文中相同的块，如<a
          href="https://blog.filippo.io/the-ecb-penguin/"> ECB企鹅</a>所示。CTR模式通常是不合适的，因为如果重复输入状态，则它不执行认证并导致重复）。

'
        details: '在许多情况下，最好选择设计用于组合保密和认证的块密码算法模式，例如Galois / Counter Mode（GCM）和EAX。项目可以允许用户为必要的兼容性启用已被破解的加密机制，但是需要用户知道他们正在这么做。

'
      crypto_weaknesses:
        description: '由项目产生的软件中的默认安全机制不应该依赖于具有已知严重弱点的加密算法或模式（例如，SHA-1密码散列算法或SSH中的CBC模式）。

'
        details: '在<a href="https://www.kb.cert.org/vuls/id/958563"> CERT：SSH CBC漏洞</a>中讨论了SSH中CBC模式的问题。

'
      crypto_pfs:
        description: '项目产生的软件中的安全机制应该​​对密钥协商协议实施完美的前向保密（PFS），如果长期密钥集合中的一个长期密钥在将来泄露，也不能破坏从一组长期密钥导出的会话密钥。

'
      crypto_password_storage:
        description: '如果项目产生的软件存储用于外部用户认证的密码，则必须使用密钥拉伸（迭代）算法（例如，PBKDF2，Bcrypt或Scrypt）将密码存储为每用户盐值不同的迭代散列
          。

'
        details: '此条款仅适用于软件强制使用密码验证用户身份的情况（如服务器端Web应用程序）。在软件存储用于认证到其他系统的密码（例如，该软件实现某个其他系统的客户端）的情况下，这是不适用的，因为该软件的至少某个部分必须经常访问未散列加密的密码。

'
      crypto_random:
        description: '由项目生成的软件中的安全机制必须使用密码学安全的随机数生成器生成所有加密密钥和随机数，并且不得使用密码学不安全的生成器。

'
        details: '密码安全的随机数生成器可以是硬件随机数生成器，或者它可以是使用诸如Hash_DRBG，HMAC_DRBG，CTR_DRBG，Yarrow或Fortuna之类的算法的加密安全的伪随机数生成器（CSPRNG）。对<i>安全性</i>随机数生成器的调用示例包括Java的java.security.SecureRandom和JavaScript的window.crypto.getRandomValues。调用<i>不安全</i>随机数生成器的示例包括Java的java.util.Random和JavaScript的Math.random。

'
      delivery_mitm:
        description: '该项目必须使用一种针对MITM攻击的传递机制。使用https或ssh + scp是可以接受的。

'
        details: '一个更强大的机制是使用数字签名的软件包发布软件，因为这样可以减轻对分发系统的攻击，但只有在用户确信签名的公钥是否正确的情况下才可以确定。用户实际上会检查签名。

'
      delivery_unsigned:
        description: '不得通过http协议获取加密散列（例如，sha1sum）并直接使用，而不检查密码学签名。

'
        details: '这些散列可以在传输过程中修改。

'
      vulnerabilities_fixed_60_days:
        description:
        details:
      vulnerabilities_critical_fixed:
        description: '项目在得到报告后应该迅速修复所有致命漏洞。

'
      no_leaked_credentials:
        description: '公共存储库不得泄漏旨在限制公众访问的有效私人凭证（例如，工作密码或私钥）。

'
        details: '项目可以泄漏测试和不重要数据库的“样本”凭据，只要它们不旨在限制公共访问。

'
      static_analysis:
        description: '如果至少有一个FLOSS工具以所选择的语言实现此条款，则至少需要将一个静态代码分析工具应用于软件发布之前任何提议的主要生成版本。

'
        details:
        na_placeholder: '为什么不能满足（例如，该语言没有FLOSS工具）？

'
        met_placeholder: '使用什么静态分析工具？

'
      static_analysis_common_vulnerabilities:
        description: '建议至少有一个用于static_analysis标准的静态分析工具包括在分析语言或环境中查找常见漏洞的规则或方法。

'
      static_analysis_fixed:
        description:
        details:
      static_analysis_often:
        description:
      dynamic_analysis:
        description: '建议在发布之前，至少将一个动态分析工具应用于软件任何发布的主要生产版本。

'
        details: '动态分析工具通过执行特定输入来检查软件。例如，项目可以使用模糊工具（例如，<a href="http://lcamt​​uf.coredump.cx/afl/">
          American Fuzzy Lop </a>）或Web应用扫描程序（例如，<a href ="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">
          OWASP ZAP </a>或<a href="http://w3af.org/"> w3af </a>）。在某些情况下，<a href="https://github.com/google/oss-fuzz#introduction">
          OSS-Fuzz </a>项目可以对您的项目应用模糊测试。为满足此条款，动态分析工具需要以某种方式改变输入，以寻找各种问题，或者将其作为一个具有至少80％分支覆盖率的自动测试套件。
          <a href="https://en.wikipedia.org/wiki/Dynamic_program_analysis">动态分析维基百科页面</a>和<a
          href =“https://www.owasp.org/index.php/Fuzzing“> OWASP页面上的fuzzing </a>识别一些动态分析工具。分析工具可能专注于寻找安全漏洞，但这不是必需的。

'
      dynamic_analysis_unsafe:
        description: '建议如果项目生成的软件包含使用内存不安全语言编写的软件（例如C或C++），则至少有一个动态工具（例如，fuzzer或web应用扫描程序）与检测缓冲区覆盖等内存安全问题的机制例行应用。如果该项目生成的软件没有以内存不安全语言编写，请选择“不适用”（N
          / A）。

'
        details: '检测内存安全问题的机制的示例包括<a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">AddressSanitizer（ASAN）</a>（可在GCC和LLVM中使用），<a
          href ="http://clang.llvm.org/docs/MemorySanitizer.html">“Memory Sanitizer”</a>和<a
          href="http://valgrind.org/"> valgrind </a>。其他可能使用的工具包括<a href="http://clang.llvm.org/docs/ThreadSanitizer.html">ThreadSanitizer</a>和<a
          href ="http://clang.llvm.org/docs /UndefinedBehaviorSanitizer.html">UndefinedBehaviorSanitizer</a>。广泛的断言也将起作用。

'
      dynamic_analysis_enable_assertions:
        description: '建议由项目生成的软件包括许多运行时断言，在动态分析期间检查。

'
      dynamic_analysis_fixed:
        description: '通过动态代码分析发现的所有严重性为中，高的可利用漏洞必须在确认后及时修复。

'
        details: '如果<a href="https://nvd.nist.gov/cvss.cfm"> CVSS 2.0 </a>基本分数为4，那么一个漏洞是中等到高的严重性。如果您没有运行动态代码分析，没有发现任何这样的漏洞，选择“不适用”（N
          / A）。

'
      installation_common:
        description: '该项目应该提供一种方法，使用常用惯例轻松安装和卸载项目生成的软件。

'
        details:
      build_reproducible:
        description: '建议该项目有一个<a href="https://reproducible-builds.org/">可重复构建</a>。

'
        details: '可复制的构建意味着多方可以独立地重做从源文件生成信息的过程，并获得每比特完全相同的结果。如果没有构建（例如，直接使用源代码而不是编译的脚本语言），请选择“N
          / A”。在某些情况下，这可以通过强制某种排序来解决。 JavaScript开发人员可能会考虑使用npm shrinkwrap和webpack的OccurenceOrderPlugin。
          GCC和clang用户可能会发现-frandom-seed选项有用。通常可以通过指定可用于重新构建的特定容器或虚拟机的加密散列来为外部方定义构建环境（包括工具集）。
          <a href="https://reproducible-builds.org/docs/">可重复构建项目具有如何执行此操作的文档</a>。

'
      crypto_used_network:
        description: '该项目产生的软件应该支持所有网络通信的安全协议，如SSHv2或更高版本，TLS1.2或更高版本（HTTPS），IPsec，SFTP和SNMPv3。默认情况下，FTP，HTTP，Telnet，SSLv3或更早版本和SSHv1等不安全协议将被禁用，只有在用户专门配置时才启用。如果项目生成的软件不支持网络通信，请选择“不适用”（N/A）。

'
      crypto_tls12:
        description: '项目生成的软件（如果支持或使用TLS）应该至少支持TLS版本1.2。请注意，TLS的前身称为SSL。如果软件不使用TLS，请选择“不适用”（N/A）。

'
      crypto_certificate_verification:
        description: '由项目生成的软件必须，如果它支持TLS，则在使用TLS（包括子资源）时默认执行TLS证书验证。如果软件不使用TLS，请选择“不适用”（N
          / A）。

'
        details: '请注意，不正确的TLS证书验证是一个常见的错误。有关详细信息，请参阅<a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">“世界上最危险的代码：在非浏览器软件中验证SSL证书“，Martin
          Georgiev等</a>和<a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">
          “你信任这个应用程序吗？”作者Michael Catanzaro </a>

'
      crypto_verification_private:
        description: '项目生成的软件（如果支持TLS）在发送带有私有信息的HTTP头（如安全Cookie）之前应该执行证书验证。如果软件不使用TLS，请选择“不适用”（N
          / A）。

'
      hardened_site:
        description: '建议项目网站，存储库（如果可通过网络访问）和下载站点（如果单独）包括具有非允许值的密钥加固头。

'
        details: '请注意，GitHub是已知满足的。 https://securityheaders.io/ 等网站可以快速查看。主要头加固包含：内容安全策略（CSP），HTTP严格传输安全性（HSTS），X-Content-Type-Options（“nosniff”），X-Frame-Options和X-XSS-Protection。

'
      hardening:
        description: '建议在项目生成的软件中使用加固机制，以便软件缺陷不太可能导致安全漏洞。

'
        details:
    '1':
      contribution_requirements:
        description:
      dco:
        description:
        details:
      governance:
        description: '该项目必须明确定义和记录其项目治理模式（决策方式，包括关键角色）。

'
        details:
      code_of_conduct:
        description:
        details:
      roles_responsibilities:
        description:
        details: '<a href="#governance">治理</a>和角色和职责的文档可以在一个地方。

'
      access_continuity:
        description:
      bus_factor:
        description: 项目必须具有2个或更多的“公交车因子”。
        details:
      documentation_roadmap:
        description: '该项目必须有一个文档化的路线图，描述项目打算做什么，至少在下一年做什么。

'
        details: '项目可能没有实现路线图，没关系。路线图的目的是帮助潜在的用户和贡献者了解项目的预期方向。它不需要特别详细。

'
      documentation_architecture:
        description:
        details: '软件架构解释了程序的基本结构，即程序的主要组件，它们之间的关系以及这些组件和关系的关键属性。

'
      documentation_security:
        description:
        details:
      documentation_quick_start:
        description: '该项目必须为新用户提供“快速启动”指南，以帮助他们快速使用该软件。

'
        details: '这个想法是向用户展示如何入门，使软件完全可以做事情。这对于潜在用户是至关重要的。

'
      documentation_current:
        description:
        details:
      documentation_achievements:
        description:
        details:
      accessibility_best_practices:
        description:
        details:
      internationalization:
        description:
        details:
      sites_password_security:
        description:
        details:
      maintenance_or_update:
        description:
      report_tracker:
        description: '项目必须使用问题跟踪器来跟踪每个问题。

'
      vulnerability_report_credit:
        description:
      vulnerability_response_process:
        description: '该项目必须有一个书面的流程来响应漏洞报告。

'
        details: '这与security_report_process有很强的相关性，它需要有一个书面的流程来报告漏洞。它还涉及到spam_report_response，它需要在一定时间内响应漏洞报告。

'
      coding_standards:
        description:
        details:
      coding_standards_enforced:
        description:
        details:
      build_standard_variables:
        description:
        details:
      build_preserve_debug:
        description:
        details:
      build_non_recursive:
        description:
        details:
      build_repeatable:
        description:
        details:
      installation_common:
        description: '该项目必须提供一种使用常用惯例轻松安装和卸载由项目生成的软件的方法。

'
        details:
      installation_standard_variables:
        description:
      installation_development_quick:
        description:
        details:
      external_dependencies:
        description: '项目必须以计算机可处理的方式列出外部依赖关系。

'
        details: '通常这是使用包管理器和/或构建系统的约定完成的。请注意，这有助于实施<a href="#installation_development_quick">
          installation_development_quick </a>。

'
      dependency_monitoring:
        description: '项目必须监视或定期检查其外部依赖（包括便利副本）以检测已知的漏洞，并修复可利用的漏洞或将其验证为不可利用的漏洞。

'
        details: '这可以使用来源分析器/依赖关系检查工具来完成，例如<a href="https://www.owasp.org/index.php/OWASP_Dependency_Check">
          OWASP的依赖关系检查</a>，<a href =“ https://www.sonatype.com/nexus-auditor">SonaType''s
          Nexus Auditor </a>，<a href="https://www.blackducksoftware.com/products/protex">
          Black Duck''s Protex</a> ，<a href="http://www.protecode.com/"> Synopsys的Protecode
          </a>和<a href="https://github.com/rubysec/bundler-audit"> Bundler-audit （适用于Ruby）</a>。一些包管理器也包括这类机制。如果组件的漏洞不能被利用，这是可以接受的，但这种分析是困难的，有时更新或修复该部件更容易。

'
      updateable_reused_components:
        description:
        details:
      interfaces_current:
        description:
      automated_integration_testing:
        description:
        details:
      regression_tests_added50:
        description:
      test_statement_coverage80:
        description:
        details:
      test_policy_mandated:
        description:
      tests_documented_added:
        description:
        details:
      warnings_strict:
        description: '在实际允许时，项目必须最大限度地严格修复项目生成的软件中的警告。

'
        details: '某些项目无法有效启用某些警告。需要证明的是，项目正在努力的启用警告标志，以便早期发现错误。

'
      implement_secure_design:
        description: '该项目必须实施安全设计原则（来自“know_secure_design”）（如适用）。如果项目不生产软件，请选择“不适用”（N
          / A）。

'
        details:
      input_validation:
        description: '项目结果必须检查来自潜在不受信任来源的所有输入，以确保它们有效（ *白名单*），如果对数据有限制，则拒绝无效输入。

'
        details: '请注意，将输入与“不良格式”（*黑名单*）的列表进行比较通常是不够的，因为攻击者通常可以绕过黑名单。例如，数字被转换成内部格式，然后检查它们是否在最小和最大（包括）之间，并且检查文本字符串以确保它们是有效的文本模式（例如，有效的UTF-8，长度，语法等）。一些数据可能需要是“任何东西”（例如，文件上传器），但这些数据通常是罕见的。

'
      hardening:
        description: '加固机制应该用于项目生产的软件，以便软件缺陷不太可能导致安全漏洞。

'
        details: '加固机制可能包括HTTP头，如内容安全策略（CSP），用于减轻攻击的编译器标志（如-fstack-protector）或用以消除未定义行为的编译器标志。对于此条款的目的，最小权限不被认为是一种加固机制（最少权限是重要的，但是另有条款）。

'
      crypto_weaknesses:
        description: '由项目产生的软件中的默认安全机制不得取决于具有已知严重弱点（例如，SHA-1密码散列算法或SSH中的CBC模式）的加密算法或模式。

'
        details: '在<a href="https://www.kb.cert.org/vuls/id/958563"> CERT：SSH CBC漏洞</a>中讨论了SSH中CBC模式的问题。

'
      crypto_algorithm_agility:
        description:
      crypto_credential_agility:
        description:
      crypto_used_network:
        description: '该项目产生的软件应该支持所有网络通信的安全协议，如SSHv2或更高版本，TLS1.2或更高版本（HTTPS），IPsec，SFTP和SNMPv3。默认情况下，FTP，HTTP，Telnet，SSLv3或更早版本和SSHv1等不安全协议将被禁用，只有在用户专门配置时才启用。如果项目生成的软件不支持网络通信，请选择“不适用”（N
          / A）。

'
      crypto_tls12:
        description: '项目生成的软件（如果支持或使用TLS）应该至少支持TLS版本1.2。请注意，TLS的前身称为SSL。如果软件不使用TLS，请选择“不适用”（N
          / A）。

'
      crypto_certificate_verification:
        description: '由项目生成的软件必须，如果它支持TLS，则在使用TLS（包括子资源）时默认执行TLS证书验证。如果软件不使用TLS，请选择“不适用”（N
          / A）。

'
        details: '请注意，不正确的TLS证书验证是一个常见的错误。有关详细信息，请参阅<a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">“世界上最危险的代码：在非浏览器软件中验证SSL证书“，Martin
          Georgiev等人</a>和<a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">
          “你信任这个应用程序吗？”作者Michael Catanzaro </a>

'
      crypto_verification_private:
        description: '项目生成的软件（如果支持TLS）必须在发送具有私有信息（如安全Cookie）的HTTP头之前执行证书验证。如果软件不使用TLS，请选择“不适用”（N
          / A）。

'
      signed_releases:
        description:
        details: '项目结果包括源代码和适用的任何生成的可交付成果（例如，可执行文件，包和容器）。生成的交付项可以单独签名源代码。可以用签名的git标签实现（使用加密数字签名）。项目可以从git类似的工具分别提供生成的结果，但在这些情况下，单独的结果必须单独签署。

'
      version_tags_signed:
        description:
      static_analysis_common_vulnerabilities:
        description:
      dynamic_analysis_unsafe:
        description:
        details:
      assurance_case:
        description:
        details:
    '2':
      bus_factor:
        description: 项目必须具有2个或更多的“公交车因子”。
        details:
      contributors_unassociated:
        description:
        details:
      copyright_per_file:
        description:
        details:
      license_per_file:
        description:
        details:
      repo_distributed:
        description:
        details:
      small_tasks:
        description:
        details:
      require_2FA:
        description:
      secure_2FA:
        description:
        details:
      code_review_standards:
        description:
        details:
      two_person_review:
        description: '该项目必须至少有50％的修改（作者之外的人提出的）在发布之前审查，以确定是否是一个有价值的修改，并且没有已知的问题，会反对其包含

'
      build_reproducible:
        description:
        details:
      test_invocation:
        description: '测试套件必须以该语言的标准方式进行调用。

'
        details: '例如“make check”，“mvn test”或“rake test”。

'
      test_continuous_integration:
        description: '该项目必须实施持续集成，将新的或更改的代码经常集成到中央代码库中，并对结果进行自动化测试。

'
        details: '在大多数情况下，这意味着每个在项目上全职工作的开发人员至少每天都会整合。

'
      test_statement_coverage90:
        description: '如果有至少一个FLOSS工具可以以所选语言度量此条款，该项目的FLOSS自动测试套件必须具有至少90％语句覆盖率。

'
      test_branch_coverage80:
        description: '如果有至少一个FLOSS工具可以以所选语言度量此条款，该项目的FLOSS自动测试套件必须具有至少80％分支覆盖率。

'
      crypto_used_network:
        description: '项目生成的软件必须支持所有网络通信的安全协议，如SSHv2或更高版本，TLS1.2或更高版本（HTTPS），IPsec，SFTP和SNMPv3。默认情况下，FTP，HTTP，Telnet，SSLv3或更早版本以及SSHv1等不安全协议必须被禁用，只有在用户专门配置时才启用。如果项目生成的软件不支持网络通信，请选择“不适用”（N
          / A）。

'
      crypto_tls12:
        description: '由项目生成的软件必须，如果支持或使用TLS，至少支持TLS版本1.2。请注意，TLS的前身称为SSL。如果软件不使用TLS，请选择“不适用”（N
          / A）。

'
      hardened_site:
        description:
      security_review:
        description:
        details:
      hardening:
        description:
        details:
      dynamic_analysis:
        description:
        details:
      dynamic_analysis_enable_assertions:
        description:
  static_pages:
    home:
      badge_program: CII 最佳实践徽章计划
      get_your_badge: 马上获取徽章！
      p1_html: |-
        The <a href="https://www.linuxfoundation.org/">Linux 基金会 (LF)</a>
        <a href="https://www.coreinfrastructure.org/">核心基础设施计划
        (CII)</a>
        最佳实践徽章是自由和开放源代码软件(FLOSS)项目展示自己遵循安全最佳实践的>途径。
        项目可以使用本Web应用，自愿、免费的自助认证，来阐述如何遵循每项最佳实践>。
        The CII 最佳实践徽章受到GitHub上众多可获得的徽章系统的启发。徽章的目标用 户将能够
        快速评估哪些FLOSS项目遵循最佳实践，也将更容易地构建高质量的安全软件。
      p2_html: |-
        关于CII 最佳实践徽章计划的更多信息，
        包括背景以及
        <a href='https://github.com/linuxfoundation/cii-best-practices-badge/blob/master/doc/criteria.md'>标准</a>, 可以访问
        <a href='https://github.com/linuxfoundation/cii-best-practices-badge'>GitHub 项目</a>.
        <a href="/zh-CN/project_stats">项目统计数据</a> 和
        <a href="/zh-CN/criteria">标准统计数据</a> 也同时提供。
        <a href="/zh-CN/projects">项目页面</a> 展示所有参与的项目，
        并支持查询（例如，你可以看到
        <a href="/zh-CN/projects?gteq=100">已经获取通过徽章的项目</a>)。
        你也可以查询
        <a href='/zh-CN/projects/1'>一个示例（我们是如何获取自己的徽章的）</a>。
      p3_html: |-
        <em>隐私和法律问题</em>：
        请访问我们的
        <a href="https://www.linuxfoundation.org/privacy">隐私策略</a>
        和
        <a href="https://www.linuxfoundation.org/terms">使用条款</a>.
        所有公开可获得的非代码内容使用
        <a href="https://creativecommons.org/licenses/by/3.0/">知识共享署名许可>证版本3.0 (C
        C-BY-3.0)</a>及其后续版本发布；
        新的非代码内容
        使用CC-BY 版本 3.0 或者更高 (CC-BY-3.0+)。
        如果集体引用，或不另外注明，
        请标明出处为CII最佳实践徽章贡献者。
  headings:
    Accessibility and internationalization: 无障碍和国际化
    Analysis: 分析
    Automated test suite: 自动测试套件
    Basic project website content: 基本项目网站内容
    Basics: 基本
    Bug-reporting process: 错误报告流程
    Change Control: 变更控制
    Coding standards: 编码标准
    Documentation: 文档
    Dynamic code analysis: 动态代码分析
    Externally-maintained components: 外部维护的组件
    Future: 未来
    future: 未来
    Installation system: 安装系统
    New functionality testing: 新功能测试
    OSS License: OSS许可证
    Other: 其他
    Other security issues: 其他安全问题
    Previous versions: 之前的版本
    Project oversight: 项目监督
    Public version-controlled source repository: 公开的版本控制的源代码存储库
    Publicly known vulnerabilities fixed: 修正公开的漏洞
    Quality: 质量
    Release notes: 发行说明
    Reporting: 报告
    Secure development knowledge: 安全开发知识
    Secure release: 安全发布
    Secured delivery against man-in-the-middle (MITM) attacks: 安全交付防御中间人（MITM）的攻击
    Security: 安全
    Static code analysis: 静态代码分析
    Unique version numbering: 唯一版本编号
    Use basic good cryptographic practices: 使用基础的良好加密实践
    Vulnerability report process: 漏洞报告流程
    Warning flags: 警告标志
    Working build system: 可工作的构建系统
    Identification: 识别
  last_entry: 最后翻译条目
  admin_only: 仅限管理员。
  criterion_status:
    Met: |2-

      完成
    Unmet: |2-

      不完整
    NA: N/A
  comma_separated_list:
  begin_with_cpe:
  not_an_email:
  known_bad_password:
  valid_text:
  url_message:
