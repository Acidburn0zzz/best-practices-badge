---
en:
  # First, some top-level i18n keys
  hello: Hello world
  # This is the generic "Submit" button text for posting form information:
  submit: Submit
  projects_count:
    one: "%{count} Project"
    other: "%{count} Projects"
  feed_title: CII Best Practices BadgeApp Updated Projects
  project_name_unknown: (Name unknown)
  #
  layouts:
    cii_best_practices: CII Best Practices
    projects: Projects
    users: Users
    profile: Profile
    settings: Settings
    logout_html: <span class="glyphicon glyphicon-log-out"></span> Logout
    signup_html: <span class="glyphicon glyphicon-user"></span> Sign Up
    login_html: <span class="glyphicon glyphicon-log-in"></span> Login
    footer_text_html: '<small> <b>Need help? Have a question? See a problem? Please
      <i><a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">send
      an email</a> </i>or <i><a href="https://github.com/linuxfoundation/cii-best-practices-badge/issues"
      target="_blank">file an issue</a></i>.</b> Â© 2015-2017 <a href="https://www.coreinfrastructure.org/
      target="_blank">Core Infrastructure Initiative</a>, a <a href="https://www.linuxfoundation.org/"
      target="_blank">Linux Foundation</a> Collaborative Project. All Rights Reserved.
      Please see our <a href="https://www.linuxfoundation.org/privacy" target="_blank">privacy
      policy</a> and <a href="https://www.linuxfoundation.org/terms" target="_blank">terms
      of use</a>. </small>

'
  account_activations:
    activated: Account activated!
    failed_activation: Invalid activation link
  password_resets:
    forgot_password: Forgot password
    reset_password: Reset password
    password_confirmation: Confirmation
    email_not_found: Email address not found
    password_empty: Password can't be empty
    password_reset: Password has been reset
    instructions_sent: Email sent with password reset instructions
    cant_reset_nonlocal: Sorry, can't reset the password for a non-local user
    reset_expired: Password reset has expired.
  sessions:
    login_header: Log in
    login_with_github_html: '<span class="fa fa-github"></span> Log in with GitHub

'
    or: or
    email: Email
    password: Password
    forgot_password: Forgot your password?
    remember_me: Remember me
    login_custom: Log in using custom account
    no_custom: No custom account? Sign up now!
    already_logged_in: You are already logged in.
    incorrect_login_info: Incorrect login information
    invalid_combo: Invalid email/password combination
    signed_in: Signed in!
    not_activated: 'Account not activated. Check your email for the activation link.

'
    signed_out: Signed out!
  users:
    new:
      signup_header: Sign up
      intro_html: |
        <a href="/login">If you have GitHub account, you can just use that
        to log in</a>. If you don''t want to log in with a GitHub account, you can
        sign up here instead. <br><br> If you didn''t receive your activation link,
        please sign up again and we will send you a new one.

      name: Name
      email: Email
      password: Password
      password_confirmation: Confirm Password
      create_account: Create my account
    show:
      other_projects_edit: Other Projects you can edit
      see_external: >
        See this user's external page.
      as_admin: "as an admin, you may also:"
      send_email_to: "send email to:"
      profile_updated: Profile updated
      delete_link_name: delete
      confirm_delete: Are you sure you want to delete this user?
    destroy:
      cannot_delete_self: Cannot delete self.
      user_deleted: User deleted.
    redirect_existing: >
      That user already exists. Did you mean to sign in?
    new_activation_link_created: >
      New activation link created.
      Please check your email to activate your account.
    please_log_in: Please log in.
  project_stats:
    index:
      project_stats_header: Project Statistics
      all_projects: All projects
      projects_nontrivial: Projects with non-trivial progress
      projects_activity_30: Projects with badge entry activity in last 30 days
      daily_activity: Daily badge entry activity
      reminders: Reminders
      active_projects: Active projects (created/updated within 30 days)
      active_in_progress: >
        Active in-progress projects (created/updated within 30 days)
      active_edited: >
        Active edited projects (updated within 30 days)
      active_edited_in_progress: >
        Active edited in-progress projects (updated within 30 days)
      projects_created_since_yesterday: >
        projects created since day before
      projects_updated_since_yesterday: >
        projects updated since day before
      reminders_sent_since_yesterday: >
        Reminders sent since yesterday
      reactivated_projects: >
        Reactivated projects in 14 days after receiving reminder
      admin_html: 'As an admin, you may also see the <a href="/reminders">detailed
        information about reminders</a>.

'
      raw_data: 'You can also see the raw data:

'
      json_format: JSON format
      csv_format: downloadable CSV format
  projects:
    index:
      add_link: Add
      add_new: Add New Project
      badge_status: Badge status
      exclude_passing: Exclude passing
      text_search: Text search
      name_or_description: Name or description text
      search: Search
    table:
      id: Id
      name: Name
      description: Description
      website: Website
      license: License
      owner: Owner
      last_achieved: Last achieved at
      pachieved: "% Achieved"
      can_also_sort: 'You can also sort by the following:'
      repository_url: repository URL
      create_time: create time (for the badge entry)
      update_time: last update time (for the badge entry)
      user_id: user id
    new:
      post_delay_warning: 'There may be a significant delay after submitting as we
        try to automatically fill in information.

'
      new_badge: New badge
      may_select_html: 'You may select from one of your GitHub repos <i>OR</i> provide
        information about some other project.

'
      select_one_github: Select one of your GitHub repos
      submit_github: Submit GitHub Repository
      url_of_homepage: 'What is the URL for the project home page (the URL for the
        project as a whole)? Start with http(s):// (many characters are not allowed,
        including "?")

'
      placeholder_of_homepage: 'http(s)://... for project home page URL

'
      url_of_repo: 'What is the URL for the version control repository (it may be
        the same as the project home page)? Start with http(s):// (many characters
        are not allowed, including "?")

'
      placeholder_of_repo: 'http(s)://... for project repo URL

'
      submit_urls: Submit URL
      sign_in_first: Please sign in to add a project!
  # report_mailer is for emails not relating to the user account.
  # The following are not localized, because there's no need
  # (they're only debug reports or reports sent to English mailing lists)
  # project_status_change.*.erb
  # report_monthly_announcement.*.erb
  # report_project_deleted.*.erb
  # report_reminder_summary.*.erb
  report_mailer:
    new_project_heading: >
      Thanks for adding your project to the Best Practices Badging Program
    new_project_part1: |
      Thank you for adding your project
      to the Best Practices Badging Program.
      The current name we have for this project is:
    new_project_part2: |
      Please visit your badge entry at
      to complete the information and get your badge!
      Here is the URL for your badge entry:
    new_project_part3_html: |
      <p>
      We encourage you to keep making progress.
      </p>

      <p>
      If you want to see <i>only</i> what you're missing,
      visit your badge entry, and
      then click on the button near the top labelled "Hide met or N/A criteria"
      If you have questions, or need help, please contact
      <a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;</a>
      or file an issue at
      <a href="https://github.com/linuxfoundation/cii-best-practices-badge/issues">https://github.com/linuxfoundation/cii-best-practices-badge/issues</a>
      (click on "new issue").
      </p>

      <p>
      Thank you for your time.
      </p>
    new_project_part3_text: |
      We encourage you to keep making progress.

      If you want to see only what you're missing, visit your badge entry, and
      then click on the button near the top labelled "Hide met or N/A criteria".
      If you have questions, or need help, please contact
      cii-badges-questions-owner@lists.coreinfrastructure.org
      or file an issue at
      https://github.com/linuxfoundation/cii-best-practices-badge/issues
      (click on "new issue").

      Thank you for your time.
    passing_part1: |
      Congratulations!

      According to the information that you've provided,
      your project has earned the CII best practices 'passing' badge.
      For more information, see this URL:
    passing_part2: |
      Please add your badge to your project and/or repository site;
      you've earned it:
    passing_part3: |
      We strongly encourage you to add or improve justification text,
      including adding URLs that point to more information.

      If you have suggestions on how to improve the criteria or
      badge web application, please file an issue at:
      https://github.com/linuxfoundation/cii-best-practices-badge/issues

      If you made changes to your project to get a badge, please let us know
      via email at cii-badges-questions@lists.coreinfrastructure.org.
      One of our goals is to encourage projects to make some improvements.
      We put some of these reports on the public wiki; please let us know
      if you do NOT want the changes publicly posted at
      https://github.com/linuxfoundation/cii-best-practices-badge/wiki/Impacts

      Thank you, and congratulations.
    in_markdown_add: "In markdown you can add this:"
    in_html_add: "In HTML you can add this:"
    in_progress_message: |
      We're sorry, but your project no longer has the "passing" badge
       and is now "in progress".
       Please see the following URL for more information:
    ending: |
      --- David A. Wheeler, CII Best Practices Badge Technical Lead
  # user_mailer is for the emails relating to the user account
  user_mailer:
    account_activation:
      before_html: |
        <h1>CII Best Practices Badging Program</h1>
        <p>Hello,</p>
        <p>
        Welcome to the Badging Program!
        Click on the link below to activate your account:
        </p>
      before_text: |
        Hello,

        Welcome to the CII Best Practices Badging Program!

        Select the link below to activate your account:
      activate: Activate
    github_welcome:
      before_html: |
        <h1>CII Best Practices Badging Program</h1>

        <p>Hello,</p>

        <p>
        Thank you for connecting your GitHub account and welcome
        to the CII Best Practices Badging Program!
        </p>

        <p>
        If you did not initiate this action, please check your GitHub
        security log under Settings&gt;Security.
        </p>
      before_text: |
        Hello,

        Thank you for connecting your GitHub account and welcome to the
        CII Best Practices Badging Program!

        If you did not initiate this action, please check your GitHub security
        log on GitHub under Settings>Security.
    password_reset:
      before_html: |
        <h1>Password reset</h1>

        <p>To reset your password click the link below:</p>
      before_text: 'To reset your password click the link below:

'
      after_html: |
        <p>This link will expire in two hours.</p>

        <p>
        If you did not request your password to be reset,
        please ignore this email and
        your password will stay as it is.
        </p>
      after_text: |
        This link will expire in two hours.

        If you did not request your password to be reset,
        please ignore this email and
        your password will stay as it is.
      reset_password: Reset password
  criteria:
    '0':
      description_good:
        description: >
          The project website MUST succinctly describe what the software does
          (what problem does it solve?).
        details: >
          This MUST be in language that potential users can understand
          (e.g., it uses minimal jargon).
        met_placeholder: >
          (Optional) Where is the succinct description?  Consider
          providing a URL.
      interact:
        description: >
          The project website MUST provide information on how to:
          obtain, provide feedback (as bug reports or enhancements),
          and contribute to the software.
        met_placeholder: >
          (Optional) Where is this information?  Consider providing URL(s).
      contribution:
        description: >
          The information on how to contribute MUST explain the
          contribution process (e.g., are pull requests used?)
        details: >
          We presume that
          <a href="https://guides.github.com/activities/contributing-to-open-source/">projects on GitHub use issues and pull requests</a>
          unless otherwise noted.
          This information can be short, e.g., stating that the project uses
          pull requests, an issue tracker, or posts to a mailing list
          (which one?)
        met_placeholder: >
          (URL required) What is the process? What URL explains it?
      contribution_requirements:
        description: >
          The information on how to contribute SHOULD include the
          requirements for acceptable contributions
          (e.g., a reference to any required coding standard).
        unmet_placeholder: >
          Why are the requirements so obvious that this information
          isn't needed?
      floss_license:
        description: >
          The software produced by the project MUST be released as FLOSS.
        details: >
          FLOSS is software released in a way that meets the
          <a href="https://opensource.org/osd-annotated">Open Source Definition</a>
          or
          <a href="http://www.gnu.org/philosophy/free-sw.en.html">Free Software
          Definition</a>.
          Examples of such licenses include the
          <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>,
          <a href="https://opensource.org/licenses/MIT">MIT</a>, <a
          href="https://opensource.org/licenses/BSD-2-Clause">BSD 2-clause</a>,
          <a href="https://opensource.org/licenses/BSD-3-Clause">BSD
          3-clause revised</a>, <a
          href="https://opensource.org/licenses/Apache-2.0">Apache 2.0</a>,
          <a href="https://opensource.org/licenses/lgpl-license">Lesser
          GNU General Public License (LGPL)</a>, and the <a
          href="https://opensource.org/licenses/gpl-license">GNU General Public
          License (GPL)</a>.
          For our purposes, this means that the license MUST be: <ul>
          <li><a href="https://opensource.org/licenses">an approved license
          by the Open Source Initiative (OSI)</a>, or</li>
          <li><a href="https://www.gnu.org/licenses/license-list.html">a free
          license as approved by the Free Software Foundation (FSF)</a>, or</li>
          <li><a href="https://www.debian.org/legal/licenses/">a free license
          acceptable to Debian main</a>, or</li>
          <li><a
          href="https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing">a
          "good" license according to Fedora</a>.</li>
          </ul>
          The software MAY also be licensed other ways
          (e.g., "GPLv2 or proprietary" is acceptable).
      floss_license_osi:
        description: >
          It is SUGGESTED that any required license(s)
          for the software produced by the project be
          <a href="https://opensource.org/licenses">approved by the
          Open Source Initiative (OSI).</a>
        details: >
          The OSI uses a rigorous approval process to determine
          which licenses are OSS.
      license_location:
        description: >
          The project MUST post the license(s) of its results
          in a standard location in their source repository.
        details: >
          E.g., as a top-level file named LICENSE or COPYING.
          License filenames MAY be followed by an extension
          such as ".txt" or ".md".
      documentation_basics:
        description: >
          The project MUST provide basic documentation for the
          software produced by the project.
        details: >
          This documentation must be in some media (such as text or video)
          that includes:
          how to install it, how to start it, how to use it (possibly with a
          tutorial using examples), and how to use it securely (e.g., what to do
          and what not to do) if that is an appropriate topic for the software.
          The security documentation need not be long.
          The project MAY use hypertext links to
          non-project material as documentation.
          If the project does not produce software,
          choose "not applicable" (N/A).
        met_placeholder: >
          (Optional) What URL(s) are the starting points to for documentation?
      documentation_interface:
        description: >
          The project MUST provide reference documentation that describes
          the external interface (both input and output) of the
          software produced by the project.
        details: >
          The documentation of an external interface explains to an
          end-user or developer how to use it.  This would include its
          application program interface (API) if the software has one.
          If it is a library, document the major classes/types and
          methods/functions that can be called. If it is a
          web application, define its URL interface (often its REST
          interface). If it is a command-line interface, document the
          parameters and options it supports. In many cases it's best
          if most of this documentation is automatically generated, so
          that this documentation stays synchronized with the software
          as it changes, but this isn't required.
          The project MAY use hypertext links to non-project material
          as documentation.
          Documentation MAY be automatically generated
          (where practical this is often the best way to do so).
          Documentation of a REST interface may be generated using
          Swagger/OpenAPI.
          Code interface documentation MAY be generated using
          tools such as <a href="http://usejsdoc.org/">JSDoc</a>
          (JavaScript), <a href="https://esdoc.org/">ESDoc</a> (JavaScript),
          pydoc (Python), and Doxygen (many).  Merely having comments in
          implementation code is not sufficient to satisfy this criterion;
          there needs to be an easy way to see the information without
          reading through all the source code.
          If the project does not produce software,
          choose "not applicable" (N/A).
      sites_https:
        description: >
          The project sites (website, repository, and download URLs)
          MUST support HTTPS using TLS.
        details: >
          You can get free certificates from
          <a href="https://letsencrypt.org/">Let's Encrypt</a>.
          Projects MAY implement this criterion using (for example) <a
          href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">GitHub
          pages</a>, <a
          href="https://about.gitlab.com/2016/12/24/were-bringing-gitlab-pages-to-community-edition/">GitLab
          pages</a>, or <a
          href="https://sourceforge.net/blog/introducing-https-for-project-websites/">SourceForge
          project pages</a>.  If you are using GitHub pages with
          custom domains, you MAY use a content delivery network
          (CDN) as a proxy to support HTTPS, such as described in the <a
          href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/">blog
          post "Secure and fast GitHub Pages with CloudFlare"</a>,
          to satisfy this criterion. If you support HTTP,
          we urge you to redirect the HTTP traffic to HTTPS.
      discussion:
        description: >
          The project MUST have one or more mechanisms
          for discussion (including proposed changes and issues) that are
          searchable, allow messages and topics to be addressed by URL,
          enable new people to participate in some of the discussions, and
          do not require client-side installation of proprietary software.
        details: >
          Examples of acceptable mechanisms include
          archived mailing list(s),
          GitHub issue and pull request discussions, Bugzilla, Mantis, and Trac.
          Asynchronous discussion mechanisms (like IRC) are acceptable if
          they meet these criteria; make sure there is a URL-addressable
          archiving mechanism.
          Proprietary JavaScript, while discouraged, is permitted.
      english:
        description: >
          The project SHOULD provide documentation in English and be able
          to accept bug reports and comments about code in English.
        details: >
          English is currently the <a
          href="https://en.wikipedia.org/wiki/Lingua_franca">lingua franca</a>
          of computer technology; supporting English increases the number
          of different potential developers and reviewers worldwide.
          A project can meet this criterion even if its core developers'
          primary language is not English.
      repo_public:
        description: >
          The project MUST have a version-controlled source repository that
          is publicly readable and has a URL.
        details: >
          The URL MAY be the same as the project URL.
          The project MAY use private (non-public) branches in specific
          cases while the change is not publicly released (e.g., for fixing
          a vulnerability before it is revealed to the public).
      repo_track:
        description: >
          The project's source repository MUST track
          what changes were made, who made
          the changes, and when the changes were made.
      repo_interim:
        description: >
          To enable collaborative review, the project's source repository MUST
          include interim versions for review between releases;
          it MUST NOT include only final releases.
        details: >
          Projects MAY choose to omit specific interim versions
          from their public source repositories
          (e.g., ones that fix specific non-public security vulnerabilities,
          may never be publicly released, or include material that cannot
          be legally posted and are not in the final release).
      repo_distributed:
        description: >
          It is SUGGESTED that common distributed version control software
          be used (e.g., git) for the project's source repository.
        details: >
          Git is not specifically required and projects
          can use centralized version control software
          (such as subversion) with justification.
      version_unique:
        description: >
          The project results MUST have a unique version identifier for each
          release intended to be used by users.
        details: >
          This MAY be met in a variety of ways including
          a commit IDs (such as git commit id or mercurial changeset id)
          or a version number (including version numbers that use
          semantic versioning or date-based schemes like YYYYMMDD).
      version_semver:
        description: >
          It is SUGGESTED that the
          <a href="http://semver.org">Semantic Versioning (SemVer) format</a>
          be used for releases.
        details: >
          Other version numbering schemes, such as commit IDs (such as
          git commit id or mercurial changeset id)
          or date-based schemes like YYYYMMDD, MAY be used as
          version numbers, since they are unique.
          Some alternatives can cause problems, because
          users may not be able to easily determine if they are up-to-date.
          SemVer may be less helpful for identifying software releases
          if all recipients only run the latest version
          (e.g., it is the code for a single website or internet service that
          is constantly updated via continuous delivery).
      version_tags:
        description: >
          It is SUGGESTED that projects identify each release within their
          version control system.
          For example, it is SUGGESTED that those using git identify
          each release using git tags.
      release_notes:
        description: >
          The project MUST provide, in each release, release notes that
          are a human-readable summary of major changes in that release
          to help users determine if they should upgrade and what the
          upgrade impact will be. The release notes MUST NOT be the raw
          output of a version control log (e.g., the "git log" command
          results are not release notes). Projects whose results are not
          intended for reuse in multiple locations (such as the software
          for a single website or service) AND employ continuous delivery
          MAY select "N/A".
        details: >
          The release notes MAY be implemented in a variety of ways.
          Many projects provide them in a file named "NEWS", "CHANGELOG",
          or "ChangeLog", optionally with extensions such as ".txt", ".md",
          or ".html".  Historically the term "change log" meant a log of
          <i>every</i> change, but to meet these criteria what is needed
          is a human-readable summary.  The release notes MAY instead be
          provided by version control system mechanisms such as the <a
          href="https://github.com/blog/1547-release-your-software">GitHub
          Releases workflow</a>.
      release_notes_vulns:
        description: >
          The release notes MUST identify every publicly known vulnerability
          that is fixed in each new release. This is "N/A" if there are no
          release notes or there have been no publicly known vulnerabilities.
      report_process:
        description: >
          The project MUST provide a process for users to submit bug reports
          (e.g., using an issue tracker or a mailing list).
      report_tracker:
        description: >
          The project SHOULD use an issue tracker
          for tracking individual issues.
        unmet_placeholder: Why is there no issue tracker?
      report_responses:
        description: >
          The project MUST acknowledge a majority of bug reports submitted in
          the last 2-12 months (inclusive); the response need not include a fix.
      enhancement_responses:
        description: >
          The project SHOULD respond to a majority (&gt;50%)
          of enhancement requests in the last 2-12 months (inclusive).
        details: >
          The response MAY be 'no' or a discussion about its merits.
          The goal is simply that there be some response to some requests,
          which indicates that the project is still alive.
          For purposes of this criterion, projects need not count fake requests
          (e.g., from spammers or automated systems).
          If a project is no longer making enhancements, please select "unmet"
          and include the URL that makes this situation clear to users.
          If a project tends to be overwhelmed by the number of enhancement
          requests, please select "unmet" and explain.
      report_archive:
        description: >
          The project MUST have a publicly available archive for reports and
          responses for later searching.
      vulnerability_report_process:
        description: >
          The project MUST publish the process for reporting vulnerabilities
          on the project site.
        details: >
          E.g., a clearly designated mailing address on
          https://PROJECTSITE/security,
          often in the form security@example.org.
          This MAY be the same as its bug reporting process.
          Vulnerability reports MAY always be public, but
          many projects have a private vulnerability reporting mechanism.
      vulnerability_report_private:
        description: >
          If private vulnerability reports are supported, the project MUST
          include how to send the information in a way that is kept private.
        details: >
          Examples include a private defect report submitted on the web
          using HTTPS (TLS) or an email encrypted using OpenPGP.
          If vulnerability reports are always public (so there
          are never private vulnerability reports),
          choose "not applicable" (N/A).
      vulnerability_report_response:
        description: >
          The project's initial response time for any vulnerability report received
          in the last 6 months MUST be less than or equal to 14 days.
        details: >
          If there have been no vulnerabilities reported in the last 6 months,
          choose "not applicable" (N/A).
      build:
        description: >
          If the software produced by the project requires building for use,
          the project MUST provide a working build system that can
          automatically rebuild the software from source code.
        details: >
          A build system determines what actions need to occur to rebuild the
          software (and in what order), and then performs those steps.
          For example, it can invoke a compiler to compile the source code.
          If an executable is created from source code, it must be possible
          to modify the project's source code and then generate
          an updated executable with those modifications.
          If the software produced by the project depends on external
          libraries, the build system does <i>not</i> need
          to build those external libraries.
          If there is no need to build anything to use the software after
          its source code is modified, select "not applicable" (N/A).
      build_common_tools:
        description: >
          It is SUGGESTED that common tools be used for building the software.
        details: >
          For example, Maven, Ant, cmake, the autotools, make, or rake.
      build_floss_tools:
        description: The project SHOULD be buildable using only FLOSS tools.
      test:
        description: >
          The project MUST use at least one automated test suite
          that is publicly released as FLOSS (this test suite may be
          maintained as a separate FLOSS project).
        details: >
          The project MAY use multiple automated test suites (e.g., one
          that runs quickly, vs. another that is more thorough but requires
          special equipment).
      test_invocation:
        description: >
          A test suite SHOULD be invocable in a standard way for that language.
        details: >
          For example, "make check", "mvn test", or "rake test".
      test_most:
        description: >
          It is SUGGESTED that the test suite cover most (or ideally all)
          the code branches, input fields, and functionality.
      test_continuous_integration:
        description: >
          It is SUGGESTED that the project implement continuous integration
          (where new or changed code is frequently integrated into a central
          code repository and automated tests are run on the result).
        rationale: >
          See
          <a href="http://martinfowler.com/articles/continuousIntegration.html">Martin Fowler</a>
          There has been some shift in the meaning of the term
          continuous integration. Historically the term continuous
          integration focused on the first part - the frequent
          integration - and not on its testing.  However, over time the
          emphasis has shifted to include the notion of running automated tests
          as soon as the code is integrated.  We realize that this
          can be difficult for some projects to apply, which is why it
          is only SUGGESTED at the passing level.
      test_policy:
        description: >
          The project MUST have a general policy (formal or not) that as major
          new functionality is added to the software produced by the project,
          tests of that functionality should
          be added to an automated test suite.
        details: >
          As long as a policy is in place, even by word of mouth,
          that says developers should add tests to the automated
          test suite for major new functionality, select "Met."
      tests_are_added:
        description: >
          The project MUST have evidence that the
          <a href="#test_policy">test_policy</a> for adding tests
          has been adhered to in
          the most recent major changes to the software produced by the project.
        details: >
          Major functionality would typically be mentioned in the release notes.
          Perfection is not required, merely evidence
          that tests are typically being added in practice to the automated
          test suite when new major functionality is added to the
          software produced by the project.
      tests_documented_added:
        description: >
          It is SUGGESTED that this policy on adding tests
          (see <a href="#test_policy">test_policy</a>) be
          <i>documented</i> in the instructions for change proposals.
        details: >
          However, even an informal rule is acceptable as long as the tests
          are being added in practice.
      warnings:
        description: >
          The project MUST enable one or more compiler warning flags, a "safe"
          language mode, or use a separate "linter" tool to look
          for code quality
          errors or common simple mistakes, if there is at least
          one FLOSS tool that
          can implement this criterion in the selected language.
        details: >
          Examples of compiler warning flags include gcc/clang "-Wall".
          Examples of a "safe" language mode include JavaScript "use strict"
          and perl5's "use warnings".
          A separate "linter" tool is simply a tool that examines the
          source code to look for code quality errors or common simple mistakes.
          These are typically enabled within the source code or
          build instructions.
      warnings_fixed:
        description: >
          The project MUST address warnings.
        details: >
          These are the warnings identified by the implementation
          of the <a href="#warnings">warnings</a> criterion.
          The project should fix warnings or mark them in the source code
          as false positives.  Ideally there would be no warnings, but a project
          MAY accept some warnings (typically less than 1 warning per 100
          lines or less than 10 warnings).
      warnings_strict:
        description: >
          It is SUGGESTED that projects be maximally strict with warnings,
          where practical.
        details: >
           Some warnings cannot be effectively enabled on some projects.
           What is needed is evidence that the project is striving
           to enable warning flags where it can, so that errors are
           detected early.
      know_secure_design:
        description: >
          The project MUST have at least one primary developer who knows
          how to design secure software.
        details: >
          This requires understanding the following
          design principles, including the 8 principles from <a
          href="http://web.mit.edu/Saltzer/www/publications/protection/">Saltzer
          and Schroeder</a>:
          <ul>
          <li>economy of mechanism (keep the design as simple and small as
          practical, e.g., by adopting sweeping simplifications)
          <li>fail-safe defaults (access decisions should deny by default, and
          projects' installation should be secure by default)
          <li>complete mediation (every access that might be limited must be
          checked for authority and be non-bypassable)
          <li>open design (security mechanisms should not depend on attacker
          ignorance of its design, but instead on more easily protected
          and changed information like keys and passwords)
          <li>separation of privilege (ideally, access to important objects
          should depend on more than one condition, so that defeating
          one protection system won't enable complete access.
          E.G., multi-factor authentication, such as requiring both a password
          and a hardware token, is stronger than single-factor authentication)
          <li>least privilege (processes should operate with the least privilege
          necessary)
          <li>least common mechanism (the design should minimize the mechanisms
          common to more than one user and depended on by all users, e.g.,
          directories for temporary files)
          <li>psychological acceptability (the human interface must be designed
          for ease of use - designing for "least astonishment" can help)
          <li>limited attack surface (the attack surface - the
          set of the different
          points where an attacker can try to enter or extract data - should
          be limited)
          <li>input validation with whitelists
          (inputs should typically be checked
          to determine if they are valid before they are accepted;
          this validation
          should use whitelists (which only accept known-good values),
          not blacklists (which attempt to list known-bad values)).
          </ul>
          A "primary developer" in a project is anyone who is familiar with
          the project's code base, is comfortable making changes to it, and is
          acknowledged as such by most other participants in the project.
          A primary developer would typically make a number of contributions
          over the past year (via code, documentation, or answering questions).
          Developers would typically be considered primary developers if they
          initiated the project (and have not left the project more than three
          years ago), have the option of receiving information on a private
          vulnerability reporting channel (if there is one), can accept commits
          on behalf of the project, or perform final releases of the project
          software.
          If there is only one developer,
          that individual is the primary developer.
      know_common_errors:
        description: >
          At least one of the project's
          primary developers MUST know of common kinds of
          errors that lead to vulnerabilities in this kind of software,
          as well as at least one method to counter or mitigate each of them.
        details: >
          Examples (depending on the type of software)
          include SQL injection, OS injection, classic buffer overflow,
          cross-site scripting, missing authentication,
          and missing authorization.
          See the <a href="http://cwe.mitre.org/top25/">CWE/SANS top 25</a> or
          <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP Top 10</a>
          for commonly used lists.
      crypto_published:
        description: >
          The software produced by the project MUST use, by default,
          only cryptographic protocols
          and algorithms that are publicly published and reviewed by experts
          (if cryptographic protocols and algorithms are used).
        details: >
          These cryptographic
          criteria do not always apply because some software has no
          need to directly use cryptographic capabilities.
      crypto_call:
        description: >
          If the software produced by the project
          is an application or library, and its primary
          purpose is not to implement cryptography, then it SHOULD only call on
          software specifically designed to implement cryptographic functions;
          it SHOULD NOT re-implement its own.
      crypto_floss:
        description: >
          All functionality in the software produced by the project
          that depends on cryptography MUST be implementable using FLOSS.
        details: >
          See the
          <a href="https://opensource.org/osr">Open Standards Requirement
          for Software by the Open Source Initiative</a>.
      crypto_keylength:
        description: >
          The security mechanisms within the software produced by the project
          MUST use default keylengths that at least
          meet the NIST minimum requirements
          through the year 2030 (as stated in 2012).
          It MUST be possible to configure the software so that
          smaller keylengths are completely disabled.
        details: >
          These minimum bitlengths are: symmetric key 112,
          factoring modulus 2048, discrete logarithm key 224,
          discrete logarithmic group 2048, elliptic curve 224,
          and hash 224 (password hashing is not covered by this
          bitlength, more information on password hashing can be found in the
          <a href="#crypto_password_storage">crypto_password_storage</a>
          criterion).
          See <a href="http://www.keylength.com">http://www.keylength.com</a>
          for a comparison of keylength recommendations from
          various organizations.
          The software MAY allow smaller keylengths in some configurations
          (ideally it would not, since this allows downgrade attacks,
          but shorter keylengths are sometimes necessary for interoperability).
      crypto_working:
        description: >
          The default security mechanisms within the software produced
          by the project MUST NOT depend on
          broken cryptographic algorithms (e.g., MD4, MD5, single DES,
          RC4, Dual_EC_DRBG) or use cipher modes that are inappropriate
          to the context (e.g., ECB mode is almost never appropriate
          because it reveals identical blocks within the ciphertext
          as demonstrated by the
          <a href="https://blog.filippo.io/the-ecb-penguin/">ECB penguin</a>,
          and CTR mode is often inappropriate because it does not
          perform authentication and causes duplicates if the input
          state is repeated).
        details: >
          In many cases it's best to choose a block cipher algorithm
          mode designed to combine secrecy and authentication, e.g.,
          Galois/Counter Mode (GCM) and EAX.
          Projects MAY allow users to enable broken mechanisms where
          necessary for compatibility, but then users know they're doing it.
      crypto_weaknesses:
        description: >
          The default security mechanisms within the software produced
          by the project SHOULD NOT depend on
          cryptographic algorithms or modes with known serious weaknesses
          (e.g., the SHA-1 cryptographic hash algorithm or the CBC mode in SSH).
        details: >
          Concerns about CBC mode in SSH are discussed in
          <a href="https://www.kb.cert.org/vuls/id/958563">CERT:
          SSH CBC vulnerability</a>.
      crypto_pfs:
        description: >
          The security mechanisms within the software produced
          by the project SHOULD implement
          perfect forward secrecy for key agreement
          protocols so a session key derived from a set of long-term keys cannot
          be compromised if one of the long-term keys is compromised
          in the future.
      crypto_password_storage:
        description: >
          If the software produced by the project causes the storing of
          passwords for authentication of external users, the passwords
          MUST be stored as iterated hashes with a per-user salt by
          using a key stretching (iterated) algorithm (e.g., PBKDF2, Bcrypt
          or Scrypt).
      crypto_random:
        description: >
          The security mechanisms within the software produced
          by the project MUST generate all cryptographic keys and nonces
          using a cryptographically secure random number generator,
          and MUST NOT do so using generators that are
          cryptographically insecure.
        details: >
          A cryptographically secure random number generator may be a
          hardware random number generator, or it may be
          a cryptographically secure pseudo-random number generator (CSPRNG)
          using an algorithm such as Hash_DRBG, HMAC_DRBG, CTR_DRBG,
          Yarrow, or Fortuna.
          Examples of calls to <i>secure</i> random number generators include
          Java's java.security.SecureRandom and JavaScript's
          window.crypto.getRandomValues.
          Examples of calls to <i>insecure</i> random number generators include
          Java's java.util.Random and JavaScript's Math.random.
      delivery_mitm:
        description: >
          The project MUST use a delivery mechanism that counters MITM attacks.
          Using https or ssh+scp is acceptable.
        details: >
          An even stronger mechanism is releasing the software with digitally
          signed packages, since that mitigates attacks on the distribution
          system, but this only works if the users can be confident that the
          public keys for signatures are correct <i>and</i> if the users will
          actually check the signature.
      delivery_unsigned:
        description: >
          A cryptographic hash (e.g., a sha1sum) MUST NOT be retrieved
          over http and used without checking for a cryptographic signature.
        details: >
          These hashes can be modified in transit.
      vulnerabilities_fixed_60_days:
        description: >
          There MUST be no unpatched vulnerabilities of medium or high severity that
          have been publicly known for more than 60 days.
        details: >
          The vulnerability must be patched and released by the project itself
          (patches may be developed elsewhere).  A vulnerability becomes
          publicly known (for this purpose) once it has a CVE with
          publicly released non-paywalled information (reported, for example,
          in the <a href="https://nvd.nist.gov/">National Vulnerability
          Database</a>) or when the project has been informed and the
          information has been released to the public (possibly by the project).
          A vulnerability is medium
          to high severity if its <a href="https://nvd.nist.gov/cvss.cfm">CVSS
          2.0</a> base score is 4 or higher.
          <b>Note</b>: this means that users might be left vulnerable to all
          attackers worldwide for up to 60 days.  This criterion is often
          much easier to meet than what Google recommends in <a
          href="https://security.googleblog.com/2010/07/rebooting-responsible-disclosure-focus.html">Rebooting
          responsible disclosure</a>, because Google recommends that the 60-day
          period start when the project is notified <em>even</em> if the report
          is not public.
      vulnerabilities_critical_fixed:
        description: >
          Projects SHOULD fix all critical vulnerabilities rapidly after they
          are reported.
      no_leaked_credentials:
        description: >
          The public repositories MUST NOT leak a valid private credential
          (e.g., a working password or private key) that is intended to limit
          public access.
        details: >
          A project MAY leak "sample" credentials for testing and
          unimportant databases, as long as they are not intended to limit
          public access.
      static_analysis:
        description: >
          At least one static code analysis tool MUST be applied to any proposed
          major production release of the software before its release,
          if there is at least one FLOSS tool that implements this criterion in
          the selected language.
        details: >
          A static code analysis tool examines the software code (as source
          code, intermediate code, or executable) without executing it
          with specific inputs.  For purposes of this criterion, compiler
          warnings and "safe" language modes do not count as static code
          analysis tools (these typically avoid deep analysis because
          speed is vital).  Examples of such static code analysis tools
          include <a href="http://cppcheck.sourceforge.net/">cppcheck</a>,
          <a href="http://clang-analyzer.llvm.org/">clang static analyzer</a>,
          <a href="http://findbugs.sourceforge.net/">FindBugs</a> (including <a
          href="https://h3xstream.github.io/find-sec-bugs/">FindSecurityBugs</a>),
          <a href="https://pmd.github.io/">PMD</a>,
          <a href="http://brakemanscanner.org/">Brakeman</a>,
          <a href="https://scan.coverity.com/">Coverity Quality Analyzer</a>, and
          <a href="http://www8.hp.com/au/en/software-solutions/static-code-analysis-sast/index.html">HP
          Fortify Static Code Analyzer</a>.
          Larger lists of tools can be found in places such as the
          <a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">Wikipedia
          list of tools for static code analysis</a>,
          <a href="https://www.owasp.org/index.php/Static_Code_Analysis">OWASP
          information on static code analysis</a>,
          <a href="http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html">NIST
          list of source code security analyzers</a>, and
          <a href="http://www.dwheeler.com/essays/static-analysis-tools.html">Wheeler's
          list of static analysis tools</a>.
          The <a href="https://continuousassurance.org/">SWAMP</a> is a no-cost
          platform for assessing vulnerabilities in software using a variety
          of tools.
          If there are no FLOSS static analysis tools available for
          the implementation language(s) used, select 'N/A'.
        na_placeholder: >
          Why can't this be met (e.g., no FLOSS tools exist for that language)?
        met_placeholder: >
          What static analysis tool(s) are used?
      static_analysis_common_vulnerabilities:
        description: >
          It is SUGGESTED that at least one of the static analysis tools
          used for the static_analysis criterion
          include rules or approaches to look for
          common vulnerabilities in the analyzed language or environment.
      static_analysis_fixed:
        description: >
          All medium and high severity exploitable vulnerabilities
          discovered with static code analysis MUST be fixed
          in a timely way after they are confirmed.
        details: >
          A vulnerability is medium to high severity if its <a
          href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a> is 4 or higher.
      static_analysis_often:
        description: >
          It is SUGGESTED that static source code analysis occur on every
          commit or at least daily.
      dynamic_analysis:
        description: >
          It is SUGGESTED that at least one dynamic analysis tool be applied
          to any proposed major production release of the software before
          its release.
        details: >
          A dynamic analysis tool examines the software
          by executing it with specific inputs.
          For example, the project MAY use a fuzzing tool (e.g.,
          <a href="http://lcamtuf.coredump.cx/afl/">American
          Fuzzy Lop</a>) or a web application scanner (e.g.,
          <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP
          ZAP</a> or <a href="http://w3af.org/">w3af</a>).
          In some cases the
          <a href="https://github.com/google/oss-fuzz#introduction">OSS-Fuzz</a>
          project may be willing to apply fuzz testing to your project.
          For purposes of this criterion the dynamic analysis
          tool needs to vary the inputs in some way to look for
          various kinds of problems <em>or</em> be an automated
          test suite with at least 80% branch coverage.  The
          <a href="https://en.wikipedia.org/wiki/Dynamic_program_analysis">Wikipedia
          page on dynamic analysis</a> and the
          <a href="https://www.owasp.org/index.php/Fuzzing">OWASP page on
          fuzzing</a> identify some dynamic analysis tools.
          The analysis tool(s) MAY be focused on looking for security
          vulnerabilities, but this is not required.
      dynamic_analysis_unsafe:
        description: >
          It is SUGGESTED that if the software produced by the project includes
          software written using a memory-unsafe language (e.g., C or C++),
          then at least one dynamic tool (e.g., a fuzzer or web
          application scanner) be routinely used in combination with
          a mechanism to detect memory safety problems such as buffer
          overwrites.
          If the project does not produce software written
          in a memory-unsafe language, choose "not applicable" (N/A).
        details: >
          Examples of mechanisms to detect memory safety problems include
          <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address Sanitizer (ASAN)</a>
          (available in GCC and LLVM),
          <a href="http://clang.llvm.org/docs/MemorySanitizer.html">Memory Sanitizer</a>,
          and <a href="http://valgrind.org/">valgrind</a>.
          Other potentially-used tools include
          <a href="http://clang.llvm.org/docs/ThreadSanitizer.html">thread sanitizer</a>
          and
          <a href="http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html">undefined behavior sanitizer</a>.
          Widespread assertions would also work.
      dynamic_analysis_enable_assertions:
        description: >
          It is SUGGESTED that the software produced by the project
          include many run-time assertions
          that are checked during dynamic analysis.
      dynamic_analysis_fixed:
        description: >
          All medium and high severity exploitable vulnerabilities
          discovered with dynamic code analysis MUST be fixed
          in a timely way after they are confirmed.
        details: >
           A vulnerability is medium to high severity if its <a
           href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a> base score is 4.
           If you are not running dynamic code analysis and thus have not
           found any vulnerabilities in this way, choose "not applicable" (N/A).
      installation_common: # Put after 'english'
        description: >
          The project SHOULD
          provide a way to easily install and uninstall the software
          produced by the project using a commonly-used convention.
        details: >
          Examples include using a package manager (at
          the system or language level), "make install/uninstall" (supporting
          DESTDIR), a container in a standard format,
          or a virtual machine image in a standard format.
          The installation and uninstallation process (e.g., its packaging)
          MAY be implemented by a third party as long as it is FLOSS.
      build_reproducible: # After build_floss_tools
        description: >
          It is SUGGESTED that
          the project have a
          <a href="https://reproducible-builds.org/">reproducible build</a>.
        details: >
          A reproducible build means that multiple parties can
          independently redo the process of generating information from
          source files and get exactly the same bit-for-bit result.  If no
          building occurs (e.g., scripting languages where the source
          code is used directly instead of being compiled), select "N/A".
          In some cases, this can resolved by forcing some sort order.
          JavaScript developers may consider using npm shrinkwrap and
          webpack OccurenceOrderPlugin.  GCC and clang users may find
          the -frandom-seed option useful.  The build environment
          (including the toolset) can often be defined for external
          parties by specifying the cryptographic hash of a specific
          container or virtual machine that they can use for rebuilding.
          The <a href="https://reproducible-builds.org/docs/">reproducible
          builds project has documentation on how to do this</a>.
      crypto_used_network:
        description: >
          The software produced by the project SHOULD
          support secure protocols for all of its network
          communications, such as SSHv2 or later, TLS1.2 or later (HTTPS),
          IPsec, SFTP, and SNMPv3.
          Insecure protocols such as FTP, HTTP, telnet,
          SSLv3 or earlier, and SSHv1 SHOULD be disabled by default,
          and only enabled if the user specifically configures it.
          If the software produced by the project does not support
          network comunications, select "not applicable" (N/A).
      crypto_tls12:
        description: >
          The software produced by the project SHOULD,
          if it supports or uses TLS, support at least TLS version 1.2.
          Note that the predecessor of TLS was called SSL.
          If the software does not use TLS,
          select "not applicable" (N/A).
      crypto_certificate_verification:
        description: >
          The software produced by the project MUST,
          if it supports TLS, perform TLS certificate verification by default
          when using TLS, including on subresources.
          If the software does not use TLS,
          select "not applicable" (N/A).
        details: >
          Note that incorrect TLS certificate verification is a common mistake.
          For more information, see
          <a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">"The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software" by Martin Georgiev et al.</a>
          and
          <a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">"Do you trust this application?" by Michael Catanzaro</a>.
      crypto_verification_private:
        description: >
          The software produced by the project SHOULD,
          if it supports TLS, perform certificate verification
          before sending HTTP headers with private information
          (such as secure cookies).
          If the software does not use TLS,
          select "not applicable" (N/A).
      hardened_site: # After delivery_mitm?
        description: >
          It is SUGGESTED that the project website, repository (if accessible
          via the web), and download site (if separate) include key hardening
          headers with nonpermissive values.
        details: >
          Note that GitHub is known to meet this.
          Sites such as https://securityheaders.io/ can quickly check this.
          The key hardening headers are:
          Content Security Policy (CSP), HTTP Strict Transport Security
          (HSTS), X-Content-Type-Options (as "nosniff"), X-Frame-Options,
          and X-XSS-Protection.
      hardening: # In 'Other security issues'
        description: >
          It is SUGGESTED that hardening mechanisms be used
          in the software produced by the project so that software defects
          are less likely to result in security vulnerabilities.
        details: >
          Hardening mechanisms may include
          HTTP headers like Content Security Policy (CSP),
          compiler flags to mitigate attacks
          (such as -fstack-protector), or compiler flags to
          eliminate undefined behavior.
          For our purposes least privilege is not considered a hardening
          mechanism (least privilege is important, but separate).

